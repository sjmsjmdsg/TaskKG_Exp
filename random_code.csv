id,truth,code
1_2_5_0_0_2_0_0,1,>@>import android.content.Intent>@>import android.support.v7.app.AppCompatActivity>@>import android.os.Bundle>@>import android.view.View>@>import android.widget.EditText>@>
1_4_0_0_0_3_2_2,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><EditText xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:layout_width=""fill_parent"">@>    android:layout_height=""fill_parent"">@>    android:textColor="""
1_4_0_0_0_3_2_3,2,">@><EditText id=""text"">@>    android:layout_width=""fill_parent"">@>    android:layout_height=""wrap_content"">@>    android:textColor="""
1_4_3_0_0_3_0_3,1,"<!-- The action for submitting a form. This text is on a button that can fit 30 chars -->>@><string name=""login_submit_button"">Sign in</string>>@>"
1_4_3_1_0_3_0_4,1,">@><string name=""countdown"">>@>  <xliff:g id=""time"" example=""5 days"">%1$s</xliff:g>until holiday>@></string>>@>"
1_4_5_3_0_0_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><selector xmlns:android=""http://schemas.android.com/apk/res/android"">>@>    <item android:state_pressed=""true"">@>          android:color=""#ffff0000""/> <!-- pressed -->>@>    <item android:state_focused=""true"">@>          android:color=""#ff0000ff""/> <!-- focused -->>@>    <item android:color=""#ff000000""/> <!-- default -->>@></selector>>@>"
1_37_7_0_0_5_1_0,2,>@>Resources res = 
1_9_4_2_8_1_1_0,1,>@>val imageview: ImageView = findViewById(R.id.image)>@>val drawable: Drawable = imageview.background>@>if (drawable is ClipDrawable) {>@>    drawable.level = drawable.level + 1000>@>}>@>
1_4_5_5_0_0_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><"
1_5_0_0_0_1_2_0,1,"<manifest ... >>@>    <application ... >>@>        <activity android:name=""com.example.myapp.MainActivity"" ... >>@>        </activity>>@>    </application>>@></manifest>"
1_5_1_0_0_1_3_0,1,">@><manifest ... >>@>    <uses-permission android:name=""android.permission.SEND_SMS""/>>@>    ...>@></manifest>>@>"
1_5_3_0_0_0_0_0,1,"<activity android:windowSoftInputMode=""stateVisible|adjustResize"" . . . >"
1_5_16_0_0_0_0_0,2,<permission-group android:
1_5_23_0_0_0_0_0,2,<uses-configuration>@>  android:
3643,2,<uses-permission android:
1_6_2_0_0_3_3_0,1,">@>override fun onRequestPermissionsResult(requestCode: Int,>@>        permissions: Array<String>, grantResults: IntArray) {>@>    when (requestCode) {>@>        MY_PERMISSIONS_REQUEST_READ_CONTACTS -> {>@>            // If request is cancelled, the result arrays are empty.>@>            if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {>@>                // permission was granted, yay! Do the>@>                // contacts-related task you need to do.>@>            } else {>@>                // permission denied, boo! Disable the>@>                // functionality that depends on this permission.>@>            }>@>            return>@>        }>@>>@>        // Add other 'when' lines to check for other>@>        // permissions this app might request.>@>        else -> {>@>            // Ignore all other requests.>@>        }>@>    }>@>}>@>"
1_7_3_0_0_2_5_0,1,>@>res/layout/main_activity.xml           # For handsets (smaller than 640dp x 480dp)>@>res/layout-
1_7_7_2_0_5_0_0,1,">@><manifest xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:versionCode=""07001"" android:versionName=""1.0"" package=""com.example.foo"">>@>    <uses-sdk android:minSdkVersion=""7"" />>@>    ...>@>"
1_7_7_3_0_5_0_0,1,">@><manifest xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:versionCode=""1001"" android:versionName=""1.0"" package=""com.example.foo"">>@>    <supports-screens android:smallScreens=""true"">@>        android:normalScreens=""true"">@>        android:largeScreens=""true"">@>        android:xlargeScreens=""true"" />>@>    ...>@>"
1_7_7_3_0_6_0_0,1,>@>>aapt dump badging>@>package: name='com.example.hello' versionCode='1' versionName='1.0'>@>sdkVersion:'11'>@>uses-permission:'android.permission.SEND_SMS'>@>application-label:'Hello'>@>application-icon-120:'res/drawable-ldpi/icon.png'>@>application-icon-160:'res/drawable-mdpi/icon.png'>@>application-icon-240:'res/drawable-hdpi/icon.png'>@>application: label='Hello' icon='res/drawable-mdpi/icon.png'>@>launchable-activity: name='com.example.hello.HelloActivity'  label='Hello' icon=''>@>uses-feature:'android.hardware.telephony'>@>uses-feature:'android.hardware.touchscreen'>@>main>@>supports-screens: 'xlarge'>@>supports-any-density: 'true'>@>locales: '--_--'>@>densities: '120' '160' '240'>@>
1_7_7_4_0_5_0_0,1,">@><manifest xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:versionCode=""1001"" android:versionName=""1.0"" package=""com.example.foo"">>@>    <supports-gl-texture android:name=""GL_OES_compressed_ETC1_RGB8_texture"" />>@>    ...>@>"
1_7_7_5_0_6_0_0,1,">@><uses-feature android:name=""android.hardware.telephony"" android:required=""false"" />>@>"
1_7_8_0_0_2_0_0,2,>@>// Get a string resource from your app's 
1_7_8_0_0_2_0_0,1,">@><ImageView>@>    android:layout_width=""wrap_content"">@>    android:layout_height=""wrap_content"">@>    android:src=""@mipmap/country_flag"" />>@>"
1_7_9_0_0_2_0_0,1,>@>private void setUpActionBar() {>@>    // Make sure we're running on Honeycomb or higher to use ActionBar APIs>@>    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {>@>        ActionBar actionBar = getActionBar();>@>        actionBar.setDisplayHomeAsUpEnabled(true);>@>    }>@>}>@>
1_8_2_4_0_2_1_0,1,">@>BridgingManager.fromContext(context).setConfig(>@>  new BridgingConfig.Builder(context, false)>@>    .build());>@>"
6828,1,">@>// Configure sign-in to request the user's ID, email address, and basic>@>// profile. The ID and basic profile are included in DEFAULT_SIGN_IN.>@>// If you need to request additional scopes to access Google APIs, specify them with>@>// requestScopes().>@>GoogleSignInOptions.Builder signInConfigBuilder = new GoogleSignInOptions>@>        .Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)>@>        .requestEmail()>@>        .build();>@>>@>// Build a GoogleApiClient with access to the Google Sign-In API and the>@>// options specified in the sign-in configuration.>@>mGoogleApiClient = new GoogleApiClient.Builder(this)>@>        .enableAutoManage(this /* FragmentActivity */, this /OnConnectionFailedListener */)>@>        .addApi(Auth.GOOGLE_SIGN_IN_API, signInConfigBuilder)>@>        .build();>@>"
6831,1,">@>Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);>@>startActivityForResult(signInIntent, RC_SIGN_IN);>@>"
1_8_3_6_0_1_2_3,1,">@>@Override>@>public void onActivityResult(int requestCode, int resultCode, Intent data) {>@>    super.onActivityResult(requestCode, resultCode, data);>@>>@>    // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...)>@>    if (requestCode == RC_SIGN_IN) {>@>        GoogleSignInResult signInResult = Auth.GoogleSignInApi.getSignInResultFromIntent(data);>@>        if (signInResult.isSuccess()) {>@>            GoogleSignInAccount acct = signInResult.getSignInAccount();>@>>@>            // Get account information>@>            mFullName = acct.getDisplayName();>@>            mGivenName = acct.getGivenName();>@>            mFamilyName = acct.getFamilyName();>@>            mEmail = acct.getEmail();>@>        }>@>    }>@>}>@>"
1_8_3_6_0_2_2_3,2,">@>private class MyOAuthCallback extends OAuthClient.Callback {>@>    @Override>@>    public void onAuthorizationResponse(Uri requestUrl, Uri responseUrl) {>@>        super.onAuthorizationResponse(requestUrl, responseUrl);>@>        Runnable r =>@>            new Runnable() {>@>                public void run() {>@>                    acquireToken();>@>                    accessAPI();>@>                }>@>            };>@>    }>@>}>@>"
1_8_3_8_0_2_0_0,1,>@>android {>@>  ...>@>  defaultConfig {>@>    ...>@>    wearAppUnbundled true>@>  }>@>}>@>
1_8_3_11_0_1_0_2,1,>@>dependencies {>@>    ...>@>>@>    compile 'com.google.android.gms:play-services-wearable:10.2.0'>@>>@>    ...>@>>@>}>@>
1_8_4_2_0_3_3_0,1,">@>private int mChinSize;>@>protected void onCreate(Bundle savedInstanceState) {>@>    super.onCreate(savedInstanceState);>@>    setContentView(R.layout.activity_main);>@>    // find the outermost element>@>    final View container = findViewById(R.id.outer_container);>@>    // attach a View.OnApplyWindowInsetsListener>@>    container.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() {>@>        @Override>@>        public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) {>@>            mChinSize = insets.getSystemWindowInsetBottom();>@>            // The following line is important for inner elements which react to insets>@>            v.onApplyWindowInsets(insets);>@>            return insets;>@>        }>@>    });>@>}>@>"
1_8_4_3_0_1_0_0,1,>@>import android.os.Bundle;>@>import android.app.Activity;>@>import android.support.wear.widget.WearableRecyclerView>@>>@>public class MainActivity extends Activity {>@>    @Override>@>    public void onCreate(Bundle savedInstanceState) {>@>        super.onCreate(savedInstanceState);>@>        setContentView(R.layout.activity_main);>@>    }>@>>@>    ...>@>}>@>
1_8_4_9_0_2_0_0,2,">@>myView.setOnGenericMotionListener(new View.OnGenericMotionListener() {>@>    @Override>@>    public boolean onGenericMotion(View v, MotionEvent ev) {>@>        if (ev.getAction() == MotionEvent.ACTION_SCROLL && RotaryEncoder.isFromRotaryEncoder(ev)) {>@>            // Don't forget the negation here>@>            float delta = -RotaryEncoder.getRotaryAxisValue(ev) * RotaryEncoder.getScaledScrollFactor(>@>            getContext());>@>>@>            // Swap these axes if you want to do horizontal scrolling instead>@>            scrollBy(0, Math.round(delta));>@>>@>            return true;>@>        }>@>>@>        return false;>@>    }>@>});>@>"
1_8_5_2_0_2_5_0,1,">@>context.startActivity(new Intent(""com.google.android.clockwork.settings.connectivity.wifi.ADD_NETWORK_SETTINGS""));>@>"
7881,2,">@>JobInfo jobInfo = new JobInfo.Builder(MY_JOB_ID,>@>        new ComponentName(this, MyJobService.class))>@>        .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)>@>        .setRequiresCharging(true)>@>        .setExtras(extras)>@>        .build();>@>((JobScheduler) getSystemService(JOB_SCHEDULER_SERVICE))>@>        .schedule(jobInfo);>@>"
7900,1,">@>WearableOptions options = new WearableOptions.Builder().setLooper(myLooper).build();>@>DataClient mDataClient = Wearable.getDataClient(context or activity, options);>@>"
1_8_5_7_0_2_2_0,1,">@><service android:name="".DataLayerListenerService"">>@>  <intent-filter>>@>      <action android:name=""com.google.android.gms.wearable.DATA_CHANGED"" />>@>      <data android:scheme=""wear"" android:host=""*"">@>               android:path=""/start-activity"" />>@>  </intent-filter>>@></service>>@>"
1_8_7_3_0_2_0_0,1,">@>class AnalogWatchFaceService : CanvasWatchFaceService() {>@>>@>    override fun onCreateEngine(): Engine {>@>        /* provide your watch face implementation */>@>        return Engine()>@>    }>@>>@>    /* implement service callback methods */>@>    inner class Engine : CanvasWatchFaceService.Engine() {>@>>@>        override fun onCreate(holder: SurfaceHolder) {>@>            super.onCreate(holder)>@>            /* initialize your watch face */>@>        }>@>>@>        override fun onPropertiesChanged(properties: Bundle?) {>@>            super.onPropertiesChanged(properties)>@>            /* get device features (burn-in, low-bit ambient) */>@>        }>@>>@>        override fun onTimeTick() {>@>            super.onTimeTick()>@>            /* the time changed */>@>        }>@>>@>        override fun onAmbientModeChanged(inAmbientMode: Boolean) {>@>            super.onAmbientModeChanged(inAmbientMode)>@>            /* the wearable switched between modes */>@>        }>@>>@>        override fun onDraw(canvas: Canvas, bounds: Rect) {>@>            /* draw your watch face */>@>        }>@>>@>        override fun onVisibilityChanged(visible: Boolean) {>@>            super.onVisibilityChanged(visible)>@>            /* the watch face became visible or invisible */>@>        }>@>    }>@>}>@>"
1_8_7_4_0_5_0_0,1,">@>override fun onDraw(canvas: Canvas, bounds: Rect) {>@>    val frameStartTimeMs: Long = SystemClock.elapsedRealtime()>@>>@>    // Drawing code here>@>>@>    if (shouldTimerBeRunning()) {>@>        var delayMs: Long = SystemClock.elapsedRealtime() - frameStartTimeMs>@>        delayMs = if (delayMs > INTERACTIVE_UPDATE_RATE_MS) {>@>            // This scenario occurs when drawing all of the components takes longer than an actual>@>            // frame. It may be helpful to log how many times this happens, so you can>@>            // fix it when it occurs.>@>            // In general, you don't want to redraw immediately, but on the next>@>            // appropriate frame (else block below).>@>            0>@>        } else {>@>            // Sets the delay as close as possible to the intended framerate.>@>            // Note that the recommended interactive update rate is 1 frame per second.>@>            // However, if you want to include the sweeping hand gesture, set the>@>            // interactive update rate up to 30 frames per second.>@>            INTERACTIVE_UPDATE_RATE_MS - delayMs>@>        }>@>        mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_CODE_UPDATE_TIME, delayMs)>@>    }>@>}>@>"
8511,1,">@>          <meta-data>@>              android:name=""android.support.wearable.complications.PROVIDER_CONFIG_ACTION"">@>              android:value=""PROVIDER_CONFIG_ACTION""/>>@>"
1_8_7_8_0_1_0_0,1,>@>setWatchFaceStyle(new WatchFaceStyle.Builder(mService)>@>        .setAcceptsTapEvents(true)>@>        // other style customizations>@>        .build());>@>
1_8_7_8_0_2_0_0,2,">@>@Override>@>public void onTapCommand(>@>       @TapType int tapType, int x, int y, long eventTime) {>@>    switch (tapType) {>@>        case WatchFaceService.TAP_TYPE_TAP:>@>            hideTapHighlight();>@>            if (withinTapRegion(x, y)) {>@>                // Implement the tap action>@>                // (e.g. show detailed step count)>@>                onWatchFaceTap();>@>            }>@>            break;>@>>@>        case WatchFaceService.TAP_TYPE_TOUCH:>@>            if (withinTapRegion(x, y)) {>@>                // Provide visual feedback of touch event>@>                startTapHighlight(x, y, eventTime);>@>            }>@>            break;>@>>@>        case WatchFaceService.TAP_TYPE_TOUCH_CANCEL:>@>            hideTapHighlight();>@>            break;>@>>@>        default:>@>            super.onTapCommand(tapType, x, y, eventTime);>@>            break;>@>    }>@>}>@>"
1_9_2_3_0_2_4_0,1,">@>// Check if the telephony hardware feature is available.>@>if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {>@>    Log.d(""HardwareFeatureTest"", ""Device can make phone calls"");>@>}>@>>@>// Check if android.hardware.touchscreen feature is available.>@>if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN)) {>@>    Log.d(""HardwareFeatureTest"", ""Device has a touch screen."");>@>}>@>"
1_9_2_3_0_2_4_2,1,">@>// Check if the camera hardware feature is available.>@>if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {>@>    Log.d(""Camera test"", ""Camera available!"");>@>} else {>@>    Log.d(""Camera test"", ""No camera available. View and edit features only."");>@>}>@>"
1_9_3_6_0_1_0_0,1,">@>mSession = new MediaSession(this, ""MusicService"");>@>mSession.setCallback(new MediaSessionCallback());>@>mSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS |>@>        MediaSession.FLAG_HANDLES_TRANSPORT_CONTROLS);>@>"
9761,1,">@>@Override>@>public Animator onCreateLogoAnimation() {>@>    return AnimatorInflater.loadAnimator(mContext,>@>            R.animator.onboarding_logo_screen_animation);>@>}>@>"
10065,1,">@>previewProgramVideoUri = Uri.withAppendedPath(PreviewPrograms.CONTENT_URI, ""content-identifier"")>@>       .buildUpon()>@>       .appendQueryParameter(""input"", TvContractCompat.buildInputId(componentName))>@>       .build();"
1_9_6_2_0_2_1_0,1,">@>@Override>@>public void onCreate() {>@>    super.onCreate();>@>    mHandlerThread = new HandlerThread(getClass()>@>      .getSimpleName());>@>    mHandlerThread.start();>@>    mDbHandler = new Handler(mHandlerThread.getLooper());>@>    mHandler = new Handler();>@>    mCaptioningManager = (CaptioningManager)>@>      getSystemService(Context.CAPTIONING_SERVICE);>@>>@>    setTheme(android.R.style.Theme_Holo_Light_NoActionBar);>@>>@>    mSessions = new ArrayList<BaseTvInputSessionImpl>();>@>    IntentFilter intentFilter = new IntentFilter();>@>    intentFilter.addAction(TvInputManager>@>      .ACTION_BLOCKED_RATINGS_CHANGED);>@>    intentFilter.addAction(TvInputManager>@>      .ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED);>@>    registerReceiver(mBroadcastReceiver, intentFilter);>@>}>@>"
1_9_6_4_0_2_0_0,1,>@>@Override>@>public final Session onCreateSession(String inputId) {>@>    BaseTvInputSessionImpl session = onCreateSessionInternal(inputId);>@>    session.setOverlayViewEnabled(true);>@>    mSessions.add(session);>@>    return session;>@>}>@>
1_9_6_4_0_3_1_0,1,>@>@Override>@>public boolean onTune(Uri channelUri) {>@>    if (mSubtitleView != null) {>@>        mSubtitleView.setVisibility(View.INVISIBLE);>@>    }>@>    notifyVideoUnavailable(TvInputManager.VIDEO_UNAVAILABLE_REASON_TUNING);>@>    mUnblockedRatingSet.clear();>@>>@>    mDbHandler.removeCallbacks(mPlayCurrentProgramRunnable);>@>    mPlayCurrentProgramRunnable = new PlayCurrentProgramRunnable(channelUri);>@>    mDbHandler.post(mPlayCurrentProgramRunnable);>@>    return true;>@>}>@>
10532,1,>@>@Override>@>public void onDrawnToSurface(Surface surface) {>@>    mFirstFrameDrawn = true;>@>    notifyVideoAvailable();>@>}>@>
10614,1,">@><tv-input xmlns:android=""http://schemas.android.com/apk/res/android"">@>  "
1_10_3_0_0_3_0_0,1,">@>IntentFilter filter = new IntentFilter(""com.google.android.gms.car.media.STATUS"");>@>BroadcastReceiver receiver = new BroadcastReceiver() {>@>    ...>@>    public void onReceive(Context context, Intent intent) {>@>        String status = intent.getStringExtra(""media_connection_status"");>@>        boolean isConnectedToCar = ""media_connected"".equals(status);>@>        // adjust settings based on the connection status>@>    }>@>};>@>registerReceiver(receiver, filter);>@>"
10887,1,">@>public void onCreate() {>@>    super.onCreate();>@>>@>    ...>@>    // Start a new MediaSession>@>    MediaSessionCompat session = new MediaSessionCompat(this, ""session tag"");>@>    setSessionToken(session.getSessionToken());>@>>@>    // Set a callback object to handle play control requests, which>@>    // implements MediaSession.Callback>@>    session.setCallback(new MyMediaSessionCallback());>@>>@>    ...>@>"
11195,1,>@>$ mic play <sound_file_path>/<sound_file>.wav>@>
1_11_5_2_0_1_2_0,1,$ ~/Downloads/android-things-setup-utility/android-things-setup-utility-linux
1_11_5_3_0_1_1_0,1,$ sudo ~/Downloads/android-things-setup-utility/android-things-setup-utility-linux
14556,1,">@><activity android:name="".ExampleActivity"" android:icon=""@drawable/app_icon"">>@>    <intent-filter>>@>        <action android:name=""android.intent.action.SEND"" />>@>        <category android:name=""android.intent.category.DEFAULT"" />>@>        <data android:mimeType=""text/plain"" />>@>    </intent-filter>>@></activity>>@>"
1_13_2_0_0_4_3_0,1,>@>override fun onRestoreInstanceState(savedInstanceState: Bundle?) {>@>    // Always call the superclass so it can restore the view hierarchy>@>    super.onRestoreInstanceState(savedInstanceState)>@>>@>    // Restore state members from saved instance>@>    savedInstanceState?.run {>@>        currentScore = getInt(STATE_SCORE)>@>        currentLevel = getInt(STATE_LEVEL)>@>    }>@>}>@>
1_13_2_0_0_5_1_1,1,">@>Intent intent = new Intent(this, SignInActivity.class);>@>startActivity(intent);>@>"
1_13_2_0_0_5_1_1,1,">@>Intent intent = new Intent(Intent.ACTION_SEND);>@>intent.putExtra(Intent.EXTRA_EMAIL, recipientArray);>@>startActivity(intent);>@>"
1_13_7_0_0_7_0_0,1,"<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:orientation=""horizontal"">@>    android:layout_width=""match_parent"" android:layout_height=""match_parent"">>@>>@>    <fragment class=""com.example.android.apis.app.FragmentLayout$TitlesFragment"">@>            android:id=""@+id/titles"" android:layout_weight=""1"">@>            android:layout_width=""0px"" android:layout_height=""match_parent"" />>@>>@>    <FrameLayout android:id=""@+id/details"" android:layout_weight=""1"">@>            android:layout_width=""0px"" android:layout_height=""match_parent"">@>            android:background=""?android:attr/detailsElementBackground"" />>@>>@></LinearLayout>"
15453,1,">@>public static class FragmentA extends ListFragment {>@>    OnArticleSelectedListener mListener;>@>    ...>@>    @Override>@>    public void onAttach(Context context) {>@>        super.onAttach(context);>@>        try {>@>            mListener = (OnArticleSelectedListener) context;>@>        } catch (ClassCastException e) {>@>            throw new ClassCastException(context.toString() + "" must implement OnArticleSelectedListener"");>@>        }>@>    }>@>    ...>@>}>@>"
1_13_7_1_0_7_0_0,1,"<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:orientation=""horizontal"">@>    android:layout_width=""match_parent"" android:layout_height=""match_parent"">>@>>@>    <fragment class=""com.example.android.apis.app.FragmentLayout$TitlesFragment"">@>            android:id=""@+id/titles"" android:layout_weight=""1"">@>            android:layout_width=""0px"" android:layout_height=""match_parent"" />>@>>@>    <FrameLayout android:id=""@+id/details"" android:layout_weight=""1"">@>            android:layout_width=""0px"" android:layout_height=""match_parent"">@>            android:background=""?android:attr/detailsElementBackground"" />>@>>@></LinearLayout>"
15546,1,>@>import android.os.Bundle;>@>import android.support.v4.app.FragmentActivity;>@>>@>public class MainActivity extends FragmentActivity {>@>    @Override>@>    public void onCreate(Bundle savedInstanceState) {>@>        super.onCreate(savedInstanceState);>@>        setContentView(R.layout.news_articles);>@>    }>@>}>@>
1_13_7_3_0_1_0_0,1,">@><FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:id=""@+id/fragment_container"">@>    android:layout_width=""match_parent"">@>    android:layout_height=""match_parent"" />>@>"
15720,1,">@>@Override>@>protected void onActivityResult(int requestCode, int resultCode, Intent data) {>@>    // Check which request we're responding to>@>    if (requestCode == PICK_CONTACT_REQUEST) {>@>        // Make sure the request was successful>@>        if (resultCode == RESULT_OK) {>@>            // The user picked a contact.>@>            // The Intent's data Uri identifies which contact was selected.>@>>@>            // Do something with the contact here (bigger example below)>@>        }>@>    }>@>}>@>"
15752,1,">@><activity android:name=""ShareActivity"">>@>    <intent-filter>>@>        <action android:name=""android.intent.action.SEND""/>>@>        <category android:name=""android.intent.category.DEFAULT""/>>@>        <data android:mimeType=""text/plain""/>>@>        <data android:mimeType=""image/*""/>>@>    </intent-filter>>@></activity>>@>"
1_13_8_4_0_3_0_0,1,">@>// Create intent to deliver some kind of result data>@>Intent result = new Intent(""com.example.RESULT_ACTION"", Uri.parse(""content://result_uri""));>@>setResult(Activity.RESULT_OK, result);>@>finish();>@>"
1_13_9_2_0_2_0_0,1,>@>@Override>@>public void onCreate(Bundle savedInstanceState) {>@>    super.onCreate(savedInstanceState);>@>    setContentView(R.layout.main);>@>>@>    Intent intent = getIntent();>@>    String action = intent.getAction();>@>    Uri data = intent.getData();>@>}>@>
15976,2,">@>adb shell am start -a android.intent.action.VIEW \>@>    -c android.intent.category.BROWSABLE \>@>    -d ""http://"
1_13_9_3_0_4_5_0,1,>@>www.example.com>@>mobile.example.com>@>www.example2.com>@>account.example.com>@>
1_13_9_3_0_4_5_0,1,>@>map.example.com (it does not have android.intent.category.BROWSABLE)>@>market://example.com (it does not have either an 鈥渉ttp鈥?or 鈥渉ttps鈥?scheme)>@>
1_37_7_0_0_5_1_0,1,>@>public void onRemoveFromRecents(View view) {>@>    // The document is no longer needed; remove its task.>@>    finishAndRemoveTask();>@>}>@>
1_13_14_2_0_4_1_0,1,"<dimen name=""widget_margin"">8dp</dimen>"
16915,1,">@>RemoteViews views = new RemoteViews(context.getPackageName(),>@>R.layout.example_appwidget);>@>appWidgetManager.updateAppWidget(mAppWidgetId, views);>@>"
1_13_14_2_0_9_2_1,1,"<service android:name=""MyWidgetService"">@>...>@>android:permission=""android.permission.BIND_REMOTEVIEWS"" />"
1_13_14_3_0_1_1_0,2,">@>private static final int REQUEST_CREATE_APPWIDGET = 5;>@>private static final int REQUEST_PICK_APPWIDGET = 9;>@>...>@>public void onClick(DialogInterface dialog, int which) {>@>    switch (which) {>@>    ...>@>        case AddAdapter.ITEM_APPWIDGET: {>@>            ...>@>            int appWidgetId =>@>                    Launcher.this.mAppWidgetHost.allocateAppWidgetId();>@>            Intent pickIntent =>@>                    new Intent(AppWidgetManager.ACTION_APPWIDGET_PICK);>@>            pickIntent.putExtra>@>                    (AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);>@>            ...>@>            startActivityForResult(pickIntent, REQUEST_PICK_APPWIDGET);>@>            break;>@>    }>@>    ...>@>}"
1_14_3_0_0_0_0_0,1,>@>findViewById<TextView>(R.id.sample_text).apply {>@>    text = viewModel.userName>@>}>@>>@>
1_14_3_1_0_0_0_0,1,>@>findViewById<TextView>(R.id.sample_text).apply {>@>    text = viewModel.userName>@>}>@>>@>
1_14_3_4_0_1_1_0,1,">@>ObservableArrayMap<String, Object> user = new ObservableArrayMap<>();>@>user.put(""firstName"", ""Google"");>@>user.put(""lastName"", ""Inc."");>@>user.put(""age"", 17);>@>>@>"
1_14_3_4_0_2_0_0,1,>@>private static class User extends BaseObservable {>@>    private String firstName;>@>    private String lastName;>@>>@>    @Bindable>@>    public String getFirstName() {>@>        return this.firstName;>@>    }>@>>@>    @Bindable>@>    public String getLastName() {>@>        return this.lastName;>@>    }>@>>@>    public void setFirstName(String firstName) {>@>        this.firstName = firstName;>@>        notifyPropertyChanged(BR.firstName);>@>    }>@>>@>    public void setLastName(String lastName) {>@>        this.lastName = lastName;>@>        notifyPropertyChanged(BR.lastName);>@>    }>@>}>@>>@>
1_14_3_5_0_1_0_0,1,>@>@Override>@>protected void onCreate(Bundle savedInstanceState) {>@>    super.onCreate(savedInstanceState);>@>    MyLayoutBinding binding = MyLayoutBinding.inflate(getLayoutInflater());>@>}>@>>@>
1_14_3_5_0_1_0_0,1,">@>val binding: MyLayoutBinding = MyLayoutBinding.inflate(getLayoutInflater(), viewGroup, false)>@>>@>"
1_14_3_5_0_1_0_0,1,>@>val binding: MyLayoutBinding = MyLayoutBinding.bind(viewRoot)>@>>@>
1_14_3_6_0_1_2_0,1,">@>@BindingMethods({>@>       @BindingMethod(type = ""android.widget.ImageView"",>@>                      attribute = ""android:tint"",>@>                      method = ""setImageTintList""),>@>})>@>>@>"
1_14_3_6_0_1_3_0,1,">@>@BindingAdapter({""android:onViewDetachedFromWindow"", ""android:onViewAttachedToWindow""}, requireAll=false)>@>public static void setListener(View view, OnViewDetachedFromWindow detach, OnViewAttachedToWindow attach) {>@>    if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1) {>@>        OnAttachStateChangeListener newListener;>@>        if (detach == null && attach == null) {>@>            newListener = null;>@>        } else {>@>            newListener = new OnAttachStateChangeListener() {>@>                @Override>@>                public void onViewAttachedToWindow(View v) {>@>                    if (attach != null) {>@>                        attach.onViewAttachedToWindow(v);>@>                    }>@>                }>@>                @Override>@>                public void onViewDetachedFromWindow(View v) {>@>                    if (detach != null) {>@>                        detach.onViewDetachedFromWindow(v);>@>                    }>@>                }>@>            };>@>        }>@>>@>        OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view, newListener,>@>                R.id.onAttachStateChangeListener);>@>        if (oldListener != null) {>@>            view.removeOnAttachStateChangeListener(oldListener);>@>        }>@>        if (newListener != null) {>@>            view.addOnAttachStateChangeListener(newListener);>@>        }>@>    }>@>}>@>>@>"
1_14_6_3_0_7_0_0,1,>@>viewTransactionsButton.setOnClickListener(new View.OnClickListener() {>@>    @Override>@>    public void onClick(View view) {>@>        Navigation.findNavController(view).navigate(R.id.viewTransactionsAction);>@>    }>@>});>@>>@>
1_14_7_1_0_2_3_0,2,">@>class ConcertViewModel {>@>    fun search(query: String): ConcertSearchResult {>@>        val boundaryCallback =>@>                ConcertBoundaryCallback(query, myService, myCache)>@>        // Use a LiveData object to communicate your network's state back>@>        // to your app's UI, as in the following example. Note that error>@>        // handling isn't shown in this snippet.>@>        // val loadingState: LiveData<MyNetworkState> =>@>        //        boundaryCallback.loadingState>@>    }>@>}>@>>@>class ConcertBoundaryCallback(>@>        private val query: String,>@>        private val service: MyService,>@>        private val cache: MyLocalCache>@>) : PagedList.BoundaryCallback<Concert>() {>@>    // Requests initial data from the network, replacing all content currently>@>    // in the database.>@>    override fun onZeroItemsLoaded() {>@>        requestAndReplaceInitialData(query)>@>    }>@>>@>    // Requests additional data from the network, appending the results to the>@>    // end of the database's existing data.>@>    override fun onItemAtEndLoaded(itemAtEnd: Concert) {>@>        requestAndAppendData(query, itemAtEnd.key)>@>    }>@>}>@>"
1_39_7_3_0_6_2_2,1,>@>public class ConcertActivity extends AppCompatActivity {>@>    private ConcertAdapter mAdapter;>@>    private ConcertViewModel mViewModel;>@>>@>    private CompositeDisposable mDisposable = new CompositeDisposable();>@>>@>    @Override>@>    public void onCreate(@Nullable Bundle savedInstanceState) {>@>        super.onCreate(savedInstanceState);>@>        RecyclerView recyclerView = findViewById(R.id.concert_list);>@>>@>        mViewModel = ViewModelProviders.of(this).get(ConcertViewModel.class);>@>        mAdapter = new ConcertAdapter();>@>        recyclerView.setAdapter(mAdapter);>@>    }>@>>@>    @Override>@>    protected void onStart() {>@>        super.onStart();>@>        mDisposable.add(mViewModel.concertList.subscribe(>@>                flowableList -> mAdapter.submitList(flowableList)>@>        ));>@>    }>@>>@>    @Override>@>    protected void onStop() {>@>        super.onStop();>@>        mDisposable.clear();>@>    }>@>}>@>
1_14_7_2_0_1_0_0,1,">@>private val adapter = ConcertAdapter()>@>private lateinit var viewModel: ConcertViewModel>@>>@>override fun onCreate(savedInstanceState: Bundle?) {>@>    viewModel = ViewModelProviders.of(this).get(ConcertViewModel::class.java)>@>    viewModel.concerts.observe(this, adapter::submitList)>@>}>@>"
1_14_7_3_0_2_0_0,2,">@>val myPagingConfig = PagedList.Config.Builder()>@>        .setPageSize(50)>@>        .setPrefetchDistance(150)>@>        .setEnablePlaceholders(true)>@>        .build()>@>>@>// The Int type argument corresponds to a PositionalDataSource object.>@>val myConcertDataSource : DataSource.Factory<Int, Concert> =>@>        concertDao.concertsByDate()>@>>@>val concertList = LivePagedListBuilder(myConcertDataSource, myPagingConfig)>@>        .setFetchExecutor(myExecutor)>@>        .build()>@>"
1_14_7_3_0_7_0_0,2,">@>public class ConcertViewModel extends ViewModel {>@>    private LiveData<PagedList<String>> mConcertDescriptions;>@>>@>    public ConcertViewModel(MyDatabase database) {>@>        DataSource.Factory<Integer, Concert> factory =>@>                database.allConcertsFactory().map(concert ->>@>                    concert.getName() + ""-"" + concert.getDate());>@>        mConcertDescriptions = new LivePagedListBuilder<>(>@>            factory, /* page size */ 30).build();>@>    }>@>}>@>"
1_4_3_1_0_5_0_4,1,"static final String EXTRA_GIGAWATTS = ""com.example.EXTRA_GIGAWATTS"";"
1_15_0_0_0_5_3_0,1,">@><intent-filter>>@>    <data android:mimeType=""video/mpeg"" android:scheme=""http"" ... />>@>    <data android:mimeType=""audio/mpeg"" android:scheme=""http"" ... />>@>    ...>@></intent-filter>>@>"
1_15_1_0_0_3_1_0,1,">@><activity android:name=""MainActivity"">>@>    <!-- This activity is the main entry, should appear in app launcher -->>@>    <intent-filter>>@>        <action android:name=""android.intent.action.MAIN"" />>@>        <category android:name=""android.intent.category.LAUNCHER"" />>@>    </intent-filter>>@></activity>>@>>@><activity android:name=""ShareActivity"">>@>    <!-- This activity handles ""SEND"" actions with text data -->>@>    <intent-filter>>@>        <action android:name=""android.intent.action.SEND""/>>@>        <category android:name=""android.intent.category.DEFAULT""/>>@>        <data android:mimeType=""text/plain""/>>@>    </intent-filter>>@>    <!-- This activity also handles ""SEND"" and ""SEND_MULTIPLE"" with media data -->>@>    <intent-filter>>@>        <action android:name=""android.intent.action.SEND""/>>@>        <action android:name=""android.intent.action.SEND_MULTIPLE""/>>@>        <category android:name=""android.intent.category.DEFAULT""/>>@>        <data android:mimeType=""application/vnd.google.panorama360+jpg""/>>@>        <data android:mimeType=""image/*""/>>@>        <data android:mimeType=""video/*""/>>@>    </intent-filter>>@></activity>>@>"
1_15_1_0_0_5_3_0,1,">@><intent-filter>>@>    <data android:scheme=""http"" android:mimeType=""video/*"" />>@>    ...>@></intent-filter>"
1_37_7_0_0_5_1_0,1,">@><uses-permission android:name=""com.android.alarm.permission.SET_ALARM"" />>@>"
1_15_2_0_0_3_2_0,1,">@><activity ...>>@>    <intent-filter>>@>        <action android:name=""android.media.action.STILL_IMAGE_CAMERA"" />>@>        <category android:name=""android.intent.category.DEFAULT"" />>@>    </intent-filter>>@></activity>>@>"
1_15_2_0_0_4_5_0,1,">@>public void insertContact(String name, String email) {>@>    Intent intent = new Intent(Intent.ACTION_INSERT);>@>    intent.setType(Contacts.CONTENT_TYPE);>@>    intent.putExtra(Intents.Insert.NAME, name);>@>    intent.putExtra(Intents.Insert.EMAIL, email);>@>    if (intent.resolveActivity(getPackageManager()) != null) {>@>        startActivity(intent);>@>    }>@>}>@>"
1_15_2_0_0_5_1_0,1,">@>public void composeEmail(String[] addresses, String subject) {>@>    Intent intent = new Intent(Intent.ACTION_SENDTO);>@>    intent.setData(Uri.parse(""mailto:"")); // only email apps should handle this>@>    intent.putExtra(Intent.EXTRA_EMAIL, addresses);>@>    intent.putExtra(Intent.EXTRA_SUBJECT, subject);>@>    if (intent.resolveActivity(getPackageManager()) != null) {>@>        startActivity(intent);>@>    }>@>}>@>"
1_15_2_0_0_5_1_0,1,">@><activity ...>>@>    <intent-filter>>@>        <action android:name=""android.intent.action.SEND"" />>@>        <data android:type=""*/*"" />>@>        <category android:name=""android.intent.category.DEFAULT"" />>@>    </intent-filter>>@>    <intent-filter>>@>        <action android:name=""android.intent.action.SENDTO"" />>@>        <data android:scheme=""mailto"" />>@>        <category android:name=""android.intent.category.DEFAULT"" />>@>    </intent-filter>>@></activity>>@>"
1_15_2_0_0_6_2_0,1,">@><provider ...>@>    android:grantUriPermissions=""true"">@>    android:exported=""true"">@>    android:permission=""android.permission.MANAGE_DOCUMENTS"">>@>    <intent-filter>>@>        <action android:name=""android.content.action.DOCUMENTS_PROVIDER"" />>@>    </intent-filter>>@></provider>>@>"
1_15_2_0_0_7_1_0,1,>@>public void callCar() {>@>    Intent intent = new Intent(ReserveIntents.ACTION_RESERVE_TAXI_RESERVATION);>@>    if (intent.resolveActivity(getPackageManager()) != null) {>@>        startActivity(intent);>@>    }>@>}>@>
1_15_2_0_0_11_0_0,1,">@><uses-permission android:name=""android.permission.CALL_PHONE"" />>@>"
20341,1,>@>Button myButton = (Button) findViewById(R.id.my_button);>@>
1_4_3_1_0_2_2_0,1,>@>ListView listView = (ListView) findViewById(R.id.listview);>@>listView.setAdapter(adapter);>@>
20446,1,>@>dependencies {>@>    implementation 'com.android.support.constraint:constraint-layout:1.1.2'>@>}>@>
1_16_2_3_0_3_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><!-- A RecyclerView with some commonly used attributes -->>@><android.support.v7.widget.RecyclerView>@>    android:id=""@+id/my_recycler_view"">@>    android:scrollbars=""vertical"">@>    android:layout_width=""match_parent"">@>    android:layout_height=""match_parent""/>>@>"
1_16_2_5_0_1_0_0,1,>@>class NewsReaderActivity : FragmentActivity() {>@>    private var mIsDualPane: Boolean = false>@>>@>    override fun onCreate(savedInstanceState: Bundle?) {>@>        super.onCreate(savedInstanceState)>@>        setContentView(R.layout.main_layout)>@>>@>        val articleView: View? = findViewById(R.id.article)>@>        mIsDualPane = articleView?.visibility == View.VISIBLE>@>    }>@>}>@>
1_16_2_5_0_1_0_0,1,>@>val catButton: Button? = findViewById(R.id.categorybutton)>@>catButton?.setOnClickListener {>@>    /* create your listener here */>@>}>@>
20894,2,">@>override fun onCreate(savedInstanceState: Bundle?) {>@>    super.onCreate(savedInstanceState)>@>    setContentView(R.layout.main)>@>>@>    val gridview: GridView = findViewById(R.id.gridview)>@>    gridview.adapter = ImageAdapter(this)>@>>@>    gridview.onItemClickListener =>@>            AdapterView.OnItemClickListener { parent, v, position, id ->>@>                Toast.makeText(this, ""$position"", Toast.LENGTH_SHORT).show()>@>            }>@>}>@>"
20894,1,">@>public void onCreate(Bundle savedInstanceState) {>@>    super.onCreate(savedInstanceState);>@>    setContentView(R.layout.main);>@>>@>    GridView gridview = (GridView) findViewById(R.id.gridview);>@>    gridview.setAdapter(new ImageAdapter(this));>@>>@>    gridview.setOnItemClickListener(new OnItemClickListener() {>@>        public void onItemClick(AdapterView<?> parent, View v,>@>                int position, long id) {>@>            Toast.makeText(HelloGridView.this, """" + position,>@>                    Toast.LENGTH_SHORT).show();>@>        }>@>    });>@>}>@>"
1_16_2_11_2_2_0_0,1,">@><resources>>@>   <declare-styleable name=""PieChart"">>@>       <attr name=""showText"" format=""boolean"" />>@>       <attr name=""labelPosition"" format=""enum"">>@>           <enum name=""left"" value=""0""/>>@>           <enum name=""right"" value=""1""/>>@>       </attr>>@>   </declare-styleable>>@></resources>>@>"
1_16_2_11_3_2_0_0,1,">@>private val mTextPaint = Paint(ANTI_ALIAS_FLAG).apply {>@>    color = mTextColor>@>    if (mTextHeight == 0f) {>@>        mTextHeight = textSize>@>    } else {>@>        textSize = mTextHeight>@>    }>@>}>@>>@>private val mPiePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {>@>    style = Paint.Style.FILL>@>    textSize = mTextHeight>@>}>@>>@>private val mShadowPaint = Paint(0).apply {>@>    color = 0x101010>@>    maskFilter = BlurMaskFilter(8f, BlurMaskFilter.Blur.NORMAL)>@>}>@>"
1_16_2_11_4_1_0_0,1,">@>class MyListener extends GestureDetector.SimpleOnGestureListener {>@>   @Override>@>   public boolean onDown(MotionEvent e) {>@>       return true;>@>   }>@>}>@>mDetector = new GestureDetector(PieChart.this.getContext(), new MyListener());>@>"
1_16_2_11_4_3_0_0,1,>@>animate().rotation(targetAngle).setDuration(ANIM_DURATION).start();>@>
1_16_3_2_0_4_1_0,1,">@><resources>>@>    <!-- base set of styles that apply to all versions -->>@>    <style name=""BaseAppTheme"" parent=""Theme.AppCompat.Light.DarkActionBar"">>@>        <item name=""colorPrimary"">@color/primaryColor</item>>@>        <item name=""colorPrimaryDark"">@color/primaryTextColor</item>>@>        <item name=""colorAccent"">@color/secondaryColor</item>>@>    </style>>@>>@>    <!-- declare the theme name that's actually applied in the manifest file -->>@>    <style name=""AppTheme"" parent=""BaseAppTheme"" />>@></resources>>@>"
1_16_3_3_0_1_0_0,1,">@><adaptive-icon>>@>    <background android:drawable=""@color/ic_background""/>>@>    <foreground android:drawable=""@mipmap/ic_foreground""/>>@></adaptive-icon>>@>"
21760,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><TextView>@>    android:layout_width=""match_parent"">@>    android:layout_height=""200dp"">@>    android:autoSizeTextType=""uniform"" />>@>"
21965,1,">@>dependencies {>@>    ...>@>    compile ""com.android.support:support-emoji:27.1.1"">@>}>@>"
1_16_3_6_4_2_2_0,1,">@>public class MyActivity extends Activity {>@>    @Override>@>    public void onCreate() {>@>        super.onCreate();>@>        FontRequest fontRequest = new FontRequest(>@>               ""com.example.fontprovider"",>@>               ""com.example"",>@>               ""emoji compat Font Query"", CERTIFICATES);>@>        EmojiCompat.Config config = new FontRequestEmojiCompatConfig(this, fontRequest);>@>        EmojiCompat.init(config);>@>        ...>@>    }>@>}>@>"
22069,1,>@>magnifier.dismiss();>@>
1_16_3_6_6_1_0_0,2,">@>SpannableStringBuilder spannable = new SpannableStringBuilder(""Text is spantastic!"");>@>spannable.setSpan(>@>    new ForegroundColorSpan(Color.RED),>@>    8, // start>@>    12, // end>@>    Spannable.SPAN_EXCLUSIVE_INCLUSIVE>@>);>@>spannable.insert(12, ""(& fon)"");>@>"
1_16_3_7_0_0_0_0,1,">@><Button>@>    android:layout_width=""wrap_content"">@>    android:layout_height=""wrap_content"">@>    android:text=""@string/button_text"">@>    ... />>@>"
22221,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><Button xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:id=""@+id/button_send"">@>    android:layout_width=""wrap_content"">@>    android:layout_height=""wrap_content"">@>    android:text=""@string/button_send"">@>    android:onClick=""sendMessage"" />>@>"
1_16_3_8_0_1_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:orientation=""vertical"">@>    android:layout_width=""fill_parent"">@>    android:layout_height=""fill_parent"">>@>    <CheckBox android:id=""@+id/checkbox_meat"">@>        android:layout_width=""wrap_content"">@>        android:layout_height=""wrap_content"">@>        android:text=""@string/meat"">@>        android:onClick=""onCheckboxClicked""/>>@>    <CheckBox android:id=""@+id/checkbox_cheese"">@>        android:layout_width=""wrap_content"">@>        android:layout_height=""wrap_content"">@>        android:text=""@string/cheese"">@>        android:onClick=""onCheckboxClicked""/>>@></LinearLayout>>@>"
1_16_4_3_0_3_0_0,1,">@>Notification notification = new NotificationCompat.Builder(mContext, CHANNEL_ID)>@>        .setSmallIcon(R.drawable.new_mail)>@>        .setContentTitle(""5 New mails from "" + sender.toString())>@>        .setContentText(subject)>@>        .setLargeIcon(aBitmap)>@>        "
1_16_4_3_0_5_0_0,1,">@>Notification notification = new NotificationCompat.Builder(context, CHANNEL_ID)>@>        // Show controls on lock screen even when user hides sensitive content.>@>        .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)>@>        .setSmallIcon(R.drawable.ic_stat_player)>@>        "
1_16_4_8_0_1_0_0,2,>@>// Get the layouts to use in the custom notification>@>
1_16_5_5_0_1_1_0,1,">@>@Override>@>public boolean onCreateOptionsMenu(Menu menu) {>@>    getMenuInflater().inflate(R.menu.options, menu);>@>    // ...>@>>@>    // Define the listener>@>    OnActionExpandListener expandListener = new OnActionExpandListener() {>@>        @Override>@>        public boolean onMenuItemActionCollapse(MenuItem item) {>@>            // Do something when action item collapses>@>            return true;  // Return true to collapse action view>@>        }>@>>@>        @Override>@>        public boolean onMenuItemActionExpand(MenuItem item) {>@>            // Do something when expanded>@>            return true;  // Return true to expand action view>@>        }>@>    };>@>>@>    // Get the MenuItem for the action item>@>    MenuItem actionMenuItem = menu.findItem(R.id.myActionItem);>@>>@>    // Assign the listener to that action item>@>    MenuItemCompat.setOnActionExpandListener(actionMenuItem, expandListener);>@>>@>    // Any other things you have to do when creating the options menu...>@>>@>    return true;>@>}>@>"
1_16_6_4_0_1_0_0,1,">@>window.decorView.apply {>@>    // Hide both the navigation bar and the status bar.>@>    // SYSTEM_UI_FLAG_FULLSCREEN is only available on Android 4.1 and higher, but as>@>    // a general rule, you should design your app to hide the status bar whenever you>@>    // hide the navigation bar.>@>    systemUiVisibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or View.SYSTEM_UI_FLAG_FULLSCREEN>@>}>@>"
23333,2,">@>@Override>@>public void onWindowFocusChanged(boolean hasFocus) {>@>    super.onWindowFocusChanged(hasFocus);>@>    if (hasFocus) {>@>        hideSystemUI();>@>    }>@>}>@>>@>private void hideSystemUI() {>@>    // Enables regular immersive mode.>@>    // For ""lean back"" mode, remove SYSTEM_UI_FLAG_IMMERSIVE.>@>    // Or for ""sticky immersive,"" replace it with SYSTEM_UI_FLAG_IMMERSIVE_STICKY>@>    View decorView = getWindow().getDecorView();>@>    decorView.setSystemUiVisibility(>@>            View.SYSTEM_UI_FLAG_IMMERSIVE>@>            // Set the content to appear under the system bars so that the>@>            // content doesn't resize when the system bars hide and show.>@>            | View.SYSTEM_UI_FLAG_LAYOUT_STABLE>@>            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION>@>            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN>@>            // Hide the nav bar and status bar>@>            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION>@>            | View.SYSTEM_UI_FLAG_FULLSCREEN);>@>}>@>>@>// Shows the system bars by removing all the flags>@>// except for the ones that make the content appear under the system bars.>@>private void showSystemUI() {>@>    View decorView = getWindow().getDecorView();>@>    decorView.setSystemUiVisibility(>@>            View.SYSTEM_UI_FLAG_LAYOUT_STABLE>@>            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION>@>            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);>@>}>@>"
1_16_6_6_0_1_0_0,1,">@>View decorView = getWindow().getDecorView();>@>decorView.setOnSystemUiVisibilityChangeListener>@>        (new View.OnSystemUiVisibilityChangeListener() {>@>    @Override>@>    public void onSystemUiVisibilityChange(int visibility) {>@>        // Note that system bars will only be ""visible"" if none of the>@>        // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.>@>        if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {>@>            // TODO: The system bars are visible. Make any desired>@>            // adjustments to your UI, such as showing the action bar or>@>            // other navigational controls.>@>        } else {>@>            // TODO: The system bars are NOT visible. Make any desired>@>            // adjustments to your UI, such as hiding the action bar or>@>            // other navigational controls.>@>        }>@>    }>@>});>@>"
1_16_8_2_0_2_0_0,2,">@>override fun onCreate(savedInstanceState: Bundle?) {>@>        super.onCreate(savedInstanceState)>@>        ...>@>>@>        // Specify that tabs should be displayed in the action bar.>@>        actionBar.navigationMode = ActionBar.NAVIGATION_MODE_TABS>@>>@>        // Create a tab listener that is called when the user changes tabs.>@>        val tabListener = object : ActionBar.TabListener {>@>>@>            override fun onTabSelected(tab: ActionBar.Tab, ft: FragmentTransaction) {>@>                // show the given tab>@>            }>@>>@>            override fun onTabUnselected(tab: ActionBar.Tab, ft: FragmentTransaction) {>@>                // hide the given tab>@>            }>@>>@>            override fun onTabReselected(tab: ActionBar.Tab, ft: FragmentTransaction) {>@>                // probably ignore this event>@>            }>@>        }>@>>@>        // Add 3 tabs, specifying the tab's text and TabListener>@>        for (i in 0 until 3) {>@>            actionBar.addTab(>@>                    actionBar.newTab()>@>                            .setText(""Tab "" + (i + 1))>@>                            .setTabListener(tabListener))>@>        }>@>}>@>"
1_16_8_3_0_5_0_0,1,">@>class MainActivity : AppCompatActivity() {>@>>@>    private lateinit var mDrawerLayout: DrawerLayout>@>>@>    override fun onCreate(savedInstanceState: Bundle?) {>@>        super.onCreate(savedInstanceState)>@>        setContentView(R.layout.activity_main)>@>>@>        mDrawerLayout = findViewById(R.id.drawer_layout)>@>>@>        val navigationView: NavigationView = findViewById(R.id.nav_view)>@>        navigationView.setNavigationItemSelectedListener { menuItem ->>@>            // set item as selected to persist highlight>@>            menuItem.isChecked = true>@>            // close drawer when item is tapped>@>            mDrawerLayout.closeDrawers()>@>>@>            // Add code here to update the UI based on the item selected>@>            // For example, swap UI fragments here>@>>@>            true>@>        }>@>    }>@>}>@>"
1_16_8_3_0_7_0_0,1,">@>class MainActivity : AppCompatActivity() {>@>>@>    private lateinit var mDrawerLayout: DrawerLayout>@>>@>    override fun onCreate(savedInstanceState: Bundle?) {>@>        super.onCreate(savedInstanceState)>@>        setContentView(R.layout.activity_main)>@>>@>        mDrawerLayout = findViewById(R.id.drawer_layout)>@>        ...>@>>@>        mDrawerLayout.addDrawerListener(>@>                object : DrawerLayout.DrawerListener {>@>                    override fun onDrawerSlide(drawerView: View, slideOffset: Float) {>@>                        // Respond when the drawer's position changes>@>                    }>@>>@>                    override fun onDrawerOpened(drawerView: View) {>@>                        // Respond when the drawer is opened>@>                    }>@>>@>                    override fun onDrawerClosed(drawerView: View) {>@>                        // Respond when the drawer is closed>@>                    }>@>>@>                    override fun onDrawerStateChanged(newState: Int) {>@>                        // Respond when the drawer motion state changes>@>                    }>@>                }>@>        )>@>    }>@>    ...>@>}>@>"
1_16_10_3_0_2_0_0,1,"/*>@> * Listen for option item selections so that we receive a notification>@> * when the user requests a refresh by selecting the refresh action bar item.>@> */>@>@Override>@>public boolean onOptionsItemSelected(MenuItem item) {>@>    switch (item.getItemId()) {>@>>@>        // Check if user triggered a refresh:>@>        case R.id.menu_refresh:>@>            Log.i(LOG_TAG, ""Refresh menu item selected"");>@>>@>            // Signal SwipeRefreshLayout to start the progress indicator>@>            mySwipeRefreshLayout.setRefreshing(true);>@>>@>            // Start the refresh background task.>@>            // This method calls setRefreshing(false) when it's finished.>@>            myUpdateOperation();>@>>@>            return true;>@>    }>@>>@>    // User didn't trigger a refresh, let the superclass handle this action>@>    return super.onOptionsItemSelected(item);>@>>@>}"
24116,1,">@>AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());>@>// Add the buttons>@>builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {>@>           public void onClick(DialogInterface dialog, int id) {>@>               // User clicked OK button>@>           }>@>       });>@>builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {>@>           public void onClick(DialogInterface dialog, int id) {>@>               // User cancelled the dialog>@>           }>@>       });>@>// Set other dialog properties>@>...>@>>@>// Create the AlertDialog>@>AlertDialog dialog = builder.create();>@>"
1_16_15_0_0_7_1_0,1,">@>public class SettingsActivity extends PreferenceActivity>@>                              implements OnSharedPreferenceChangeListener {>@>    public static final String KEY_PREF_SYNC_CONN = ""pref_syncConnectionType"";>@>    ...>@>>@>    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,>@>        String key) {>@>        if (key.equals(KEY_PREF_SYNC_CONN)) {>@>            Preference connectionPref = findPreference(key);>@>            // Set summary to be the user-description for the selected value>@>            connectionPref.setSummary(sharedPreferences.getString(key, """"));>@>        }>@>    }>@>}>@>"
1_16_15_0_0_9_4_0,1,">@>@Override>@>protected Object onGetDefaultValue(TypedArray a, int index) {>@>    return a.getInteger(index, DEFAULT_VALUE);>@>}>@>"
1_16_16_2_0_3_1_0,1,">@><application ... >>@>    <activity android:name="".SearchableActivity"" >>@>        <intent-filter>>@>            <action android:name=""android.intent.action.SEARCH"" />>@>        </intent-filter>>@>        <meta-data android:name=""android.app.searchable"">@>                   android:resource=""@xml/searchable""/>>@>    </activity>>@>    ...>@></application>>@>"
24792,1,">@>@Override>@>public void onCreate(Bundle savedInstanceState) {>@>    super.onCreate(savedInstanceState);>@>    setContentView(R.layout.search);>@>>@>    // Get the intent, verify the action and get the query>@>    Intent intent = getIntent();>@>    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {>@>      String query = intent.getStringExtra(SearchManager.QUERY);>@>      doMySearch(query);>@>    }>@>}>@>"
1_16_16_2_0_6_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><searchable xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:label=""@string/search_label"">@>    android:hint=""@string/search_hint"">@>    "
25206,1,">@>override fun onCreateOptionsMenu(menu: Menu): Boolean {>@>    menuInflater.inflate(R.menu.options_menu, menu)>@>>@>    return true>@>}>@>"
25237,1,>@>class DatabaseTable(context: Context) {>@>>@>    private val mDatabaseOpenHelper = DatabaseOpenHelper(context)>@>>@>}>@>
1_16_16_6_3_1_0_0,2,">@>public class DatabaseTable {>@>>@>    private static final String TAG = ""DictionaryDatabase"";>@>>@>    //The columns we'll include in the dictionary table>@>    public static final String COL_WORD = ""WORD"";>@>    public static final String COL_DEFINITION = ""DEFINITION"";>@>>@>    private static final String DATABASE_NAME = ""DICTIONARY"";>@>    private static final String FTS_VIRTUAL_TABLE = ""FTS"";>@>    private static final int DATABASE_VERSION = 1;>@>>@>    private final DatabaseOpenHelper mDatabaseOpenHelper;>@>>@>    public DatabaseTable(Context context) {>@>        mDatabaseOpenHelper = new DatabaseOpenHelper(context);>@>    }>@>>@>    private static class DatabaseOpenHelper extends SQLiteOpenHelper {>@>>@>        private final Context mHelperContext;>@>        private SQLiteDatabase mDatabase;>@>>@>        private static final String FTS_TABLE_CREATE =>@>                    ""CREATE VIRTUAL TABLE "" + FTS_VIRTUAL_TABLE +>@>                    "" USING fts3 ("" +>@>                    COL_WORD + "", "" +>@>                    COL_DEFINITION + "")"";>@>>@>        DatabaseOpenHelper(Context context) {>@>            super(context, DATABASE_NAME, null, DATABASE_VERSION);>@>            mHelperContext = context;>@>        }>@>>@>        @Override>@>        public void onCreate(SQLiteDatabase db) {>@>            mDatabase = db;>@>            mDatabase.execSQL(FTS_TABLE_CREATE);>@>        }>@>>@>        @Override>@>        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {>@>            Log.w(TAG, ""Upgrading database from version "" + oldVersion + "" to "">@>                    + newVersion + "", which will destroy all old data"");>@>            db.execSQL(""DROP TABLE IF EXISTS "" + FTS_VIRTUAL_TABLE);>@>            onCreate(db);>@>        }>@>    }>@>}>@>"
1_16_16_6_3_2_0_0,1,>@>override fun onCreate(db: SQLiteDatabase) {>@>    mDatabase = db>@>    mDatabase.execSQL(FTS_TABLE_CREATE)>@>    loadDictionary()>@>}>@>
25266,2,">@>@Override>@>public boolean onCreateOptionsMenu(Menu menu) {>@>>@>    MenuInflater inflater = getMenuInflater();>@>    inflater.inflate(R.menu.options_menu, menu);>@>>@>    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {>@>        SearchManager searchManager =>@>                (SearchManager) getSystemService(Context.SEARCH_SERVICE);>@>        SearchView searchView =>@>                (SearchView) menu.findItem(R.id.search).getActionView();>@>        searchView.setSearchableInfo(>@>                searchManager.getSearchableInfo(getComponentName()));>@>        searchView.setIconifiedByDefault(false);>@>    }>@>    return true;>@>}>@>"
1_17_3_0_0_6_0_0,1,">@>val bouncer = AnimatorSet().apply {>@>    play(bounceAnim).before(squashAnim1)>@>    play(squashAnim1).with(squashAnim2)>@>    play(squashAnim1).with(stretchAnim1)>@>    play(squashAnim1).with(stretchAnim2)>@>    play(bounceBackAnim).after(stretchAnim2)>@>}>@>val fadeAnim = ObjectAnimator.ofFloat(newBall, ""alpha"", 1f, 0f).apply {>@>    duration = 250>@>}>@>AnimatorSet().apply {>@>    play(bouncer).before(fadeAnim)>@>    start()>@>}>@>"
1_17_3_0_0_8_0_0,1,">@><LinearLayout>@>    android:orientation=""vertical"">@>    android:layout_width=""wrap_content"">@>    android:layout_height=""match_parent"">@>    android:id=""@+id/verticalContainer"">@>    android:animateLayoutChanges=""true"" />>@>"
1_17_3_0_0_10_0_0,1,">@>public class FloatEvaluator implements TypeEvaluator {>@>>@>    public Object evaluate(float fraction, Object startValue, Object endValue) {>@>        float startFloat = ((Number) startValue).floatValue();>@>        return startFloat + fraction * (((Number) endValue).floatValue() - startFloat);>@>    }>@>}>@>"
1_17_4_0_0_2_0_0,1,">@><!-- res/drawable/vectordrawable.xml -->>@><vector xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:height=""64dp"">@>    android:width=""64dp"">@>    android:viewportHeight=""600"">@>    android:viewportWidth=""600"">>@>    <group>@>        "
26200,1,">@>val fling = FlingAnimation(view, DynamicAnimation.SCROLL_X)>@>"
26448,1,">@>private ViewGroup mContainerView;>@>...>@>private void addItem() {>@>    View newView;>@>    ...>@>    mContainerView.addView(newView, 0);>@>}>@>"
1_17_11_0_0_2_1_2,1,>@>Transition mFadeTransition = new Fade();>@>
26543,1,">@>TransitionManager.go(mEndingScene, mFadeTransition);>@>"
1_17_12_0_0_2_2_0,1,>@>override fun captureEndValues(transitionValues: TransitionValues) {>@>    captureValues(transitionValues)>@>}>@>
26675,1,>@>// inside your activity (if you did not enable transitions in your theme)>@>with(window) {>@>    requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)>@>>@>    // set an exit transition>@>    exitTransition = Explode()>@>}>@>
1_18_2_0_0_1_0_0,1,">@>val myImage: Drawable = ResourcesCompat.getDrawable(mContext.resources, R.drawable.my_image, null)>@>"
1_18_3_0_0_2_1_1,1,">@><set xmlns:android=""http://schemas.android.com/apk/res/android"">>@>   <objectAnimator>@>      android:duration=""3000"">@>      android:propertyName=""pathData"">@>      android:valueFrom=""M300,70 l 0,-70 70,70 0,0   -70,70z"">@>      android:valueTo=""M300,70 l 0,-70 70,0  0,140 -70,0 z"">@>      android:valueType=""pathType""/>>@></set>>@>"
26846,1,>@>//For Gradle Plugin 2.0+>@> android {>@>   defaultConfig {>@>     vectorDrawables.useSupportLibrary = true>@>    }>@> }>@>
1_18_5_0_0_2_1_0,1,>@>// Generate palette synchronously and return it>@>fun createPaletteSync(bitmap: Bitmap): Palette = Palette.from(bitmap).generate()>@>>@>// Generate palette asynchronously and use it on a different>@>// thread using onGenerated()>@>fun createPaletteAsync(bitmap: Bitmap) {>@>    Palette.from(bitmap).generate { palette ->>@>        // Use generated instance>@>    }>@>}>@>
1_18_7_0_0_5_1_0,1,">@>view.setLayerType(View.LAYER_TYPE_HARDWARE, null);>@>ObjectAnimator animator = ObjectAnimator.ofFloat(view, ""rotationY"", 180);>@>animator.addListener(new AnimatorListenerAdapter() {>@>    @Override>@>    public void onAnimationEnd(Animator animation) {>@>        view.setLayerType(View.LAYER_TYPE_NONE, null);>@>    }>@>});>@>animator.start();>@>"
1_18_8_0_0_3_2_0,1,">@>public void onDrawFrame(GL10 unused) {>@>    ...>@>    // Combine the projection and camera view matrices>@>    Matrix.multiplyMM(mMVPMatrix, 0, mProjMatrix, 0, mVMatrix, 0);>@>>@>    // Apply the combined projection and camera view transformations>@>    GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);>@>>@>    // Draw objects>@>    ...>@>}>@>"
27341,1,>@>String extensions = gl.glGetString(GL10.GL_EXTENSIONS);>@>
27540,1,">@>private float[] mRotationMatrix = new float[16];>@>Override>@>public void onDrawFrame(GL10 gl) {>@>    float[] scratch = new float[16];>@>>@>    ...>@>>@>    // Create a rotation transformation for the triangle>@>    long time = SystemClock.uptimeMillis() % 4000L;>@>    float angle = 0.090f * ((int) time);>@>    Matrix.setRotateM(mRotationMatrix, 0, angle, 0, 0, -1.0f);>@>>@>    // Combine the rotation matrix with the projection and camera view>@>    // Note that the mMVPMatrix factor *must be first* in order>@>    // for the matrix multiplication product to be correct.>@>    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);>@>>@>    // Draw triangle>@>    mTriangle.draw(scratch);>@>}>@>"
1_19_4_2_0_1_2_0,1,">@>// myMediaRouteButtonMenuItem.xml>@><?xml version=""1.0"" encoding=""utf-8""?>>@><menu xmlns:android=""http://schemas.android.com/apk/res/android"">@>      xmlns:app=""http://schemas.android.com/apk/res-auto"">@>      >>@>>@>    <item android:id=""@+id/media_route_menu_item"">@>        android:title=""@string/media_route_menu_title"">@>        app:actionProviderClass=""android.support.v7.app.MediaRouteActionProvider"">@>        app:showAsAction=""always"">@>    />>@></menu>>@>"
1_19_4_3_0_3_4_0,2,">@>class SampleMediaRouteProvider(context: Context) : MediaRouteProvider(context) {>@>>@>    init {>@>        publishRoutes()>@>    }>@>>@>    private fun publishRoutes() {>@>        val resources = context.resources>@>        val routeName: String = resources.getString(R.string.variable_volume_basic_route_name)>@>        val routeDescription: String = resources.getString(R.string.sample_route_description)>@>        // Create a route descriptor using previously created IntentFilters>@>        val routeDescriptor: MediaRouteDescriptor =>@>                MediaRouteDescriptor.Builder(VARIABLE_VOLUME_BASIC_ROUTE_ID, routeName)>@>                        .setDescription(routeDescription)>@>                        .addControlFilters(CONTROL_FILTERS_BASIC)>@>                        .setPlaybackStream(AudioManager.STREAM_MUSIC)>@>                        .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE)>@>                        .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE)>@>                        .setVolumeMax(VOLUME_MAX)>@>                        .setVolume(mVolume)>@>                        .build()>@>        // Add the route descriptor to the provider descriptor>@>        val providerDescriptor: MediaRouteProviderDescriptor =>@>                MediaRouteProviderDescriptor.Builder()>@>                        .addRoute(routeDescriptor)>@>                        .build()>@>>@>        // Publish the descriptor to the framework>@>        descriptor = providerDescriptor>@>    }>@>    ...>@>}>@>"
1_19_5_0_0_2_1_0,2,">@>VolumeShaper.Configuration config =>@>  new VolumeShaper.Configuration.Builder()>@>      .setDuration(3000)>@>      .setCurve(new float[] {0.f, 1.f}, new float[] {0.f, 1.f})>@>      .setInterpolatorType(VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR)>@>      .build();>@>"
1_19_6_0_0_4_4_0,1,>@>public class MyService extends Service {>@>   MediaPlayer mMediaPlayer;>@>   // ...>@>>@>   @Override>@>   public void onDestroy() {>@>       super.onDestroy()>@>       if (mMediaPlayer != null) mMediaPlayer.release();>@>   }>@>}>@>
1_19_7_0_0_1_0_0,1,">@><uses-permission android:name=""android.permission.RECORD_AUDIO"" />>@>"
1_20_3_3_0_2_0_0,1,>@>public class PhotoManager {>@>    ...>@>    private PhotoManager() {>@>        ...>@>        // A queue of Runnables>@>        private final BlockingQueue<Runnable> mDecodeWorkQueue;>@>        ...>@>        // Instantiates the queue of Runnables as a LinkedBlockingQueue>@>        mDecodeWorkQueue = new LinkedBlockingQueue<Runnable>();>@>        ...>@>    }>@>    ...>@>}>@>
1_20_3_4_0_1_0_0,2,">@>public class PhotoManager {>@>    public void handleState(PhotoTask photoTask, int state) {>@>        switch (state) {>@>            // The task finished downloading the image>@>            case DOWNLOAD_COMPLETE:>@>            // Decodes the image>@>                mDecodeThreadPool.execute(>@>                        photoTask.getPhotoDecodeRunnable());>@>            ...>@>        }>@>        ...>@>    }>@>    ...>@>}>@>"
1_20_3_4_0_2_0_0,1,>@>class PhotoDecodeRunnable : Runnable {>@>>@>    // Defines the code to run for this task>@>    override fun run() {>@>        /*>@>         * Stores the current Thread in the>@>         * object that contains PhotoDecodeRunnable>@>         */>@>        mPhotoTask.setImageDecodeThread(Thread.currentThread())>@>        ...>@>    }>@>    ...>@>}>@>
1_20_3_5_0_2_3_0,1,>@>    object PhotoManager {>@>        ...>@>        private val mHandler: Handler = object : Handler(Looper.getMainLooper()) {>@>>@>            override fun handleMessage(inputMessage: Message) {>@>                // Gets the image task from the incoming Message object.>@>                val photoTask = inputMessage.obj as PhotoTask>@>                // Gets the ImageView for this task>@>                val localView: PhotoView = photoTask.getPhotoView()>@>                ...>@>                when (inputMessage.what) {>@>                    ...>@>                    TASK_COMPLETE -> localView.setImageBitmap(photoTask.image)>@>                    ...>@>                    else -> super.handleMessage(inputMessage)>@>                }>@>                ...>@>            }>@>            ...>@>        }>@>        ...>@>    ...>@>    }>@>...>@>}>@>
1_20_5_0_0_7_1_0,1,>@>public class ExampleService extends Service {>@>    int mStartMode;       // indicates how to behave if the service is killed>@>    IBinder mBinder;      // interface for clients that bind>@>    boolean mAllowRebind; // indicates whether onRebind should be used>@>>@>    @Override>@>    public void 
1_20_5_2_0_1_0_0,1,">@>public class RSSPullService extends IntentService {>@>    @Override>@>    protected void onHandleIntent(Intent workIntent) {>@>        // Gets data from the incoming Intent>@>        String dataString = workIntent.getDataString();>@>        ...>@>        // Do work here, based on the contents of dataString>@>        ...>@>    }>@>}>@>"
30032,1,">@>public class RemoteService extends Service {>@>    @Override>@>    public void onCreate() {>@>        super.onCreate();>@>    }>@>>@>    @Override>@>    public IBinder onBind(Intent intent) {>@>        // Return the interface>@>        return mBinder;>@>    }>@>>@>    private final IRemoteService.Stub mBinder = new IRemoteService.Stub() {>@>        public int getPid(){>@>            return Process.myPid();>@>        }>@>        public void basicTypes(int anInt, long aLong, boolean aBoolean,>@>            float aFloat, double aDouble, String aString) {>@>            // Does nothing>@>        }>@>    };>@>}>@>"
30334,1,"<uses-permission android:name=""android.permission.WAKE_LOCK"" />"
1_20_9_2_0_3_0_0,1,">@>PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);>@>WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,>@>        ""MyApp::MyWakelockTag"");>@>wakeLock.acquire();>@>"
1_21_3_0_0_2_2_0,1,">@>private File getTempFile(Context context, String url) {>@>    File file;>@>    try {>@>        String fileName = Uri.parse(url).getLastPathSegment();>@>        file = File.createTempFile(fileName, null, context.getCacheDir());>@>    } catch (IOException e) {>@>        // Error while creating file>@>    }>@>    return file;>@>}>@>"
1_21_3_0_0_3_2_0,1,">@>/* Checks if external storage is available for read and write */>@>fun isExternalStorageWritable(): Boolean {>@>    return Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED>@>}>@>>@>/* Checks if external storage is available to at least read */>@>fun isExternalStorageReadable(): Boolean {>@>     return Environment.getExternalStorageState() in>@>        setOf(Environment.MEDIA_MOUNTED, Environment.MEDIA_MOUNTED_READ_ONLY)>@>}>@>"
1_21_3_0_0_3_3_0,2,">@>fun getPublicAlbumStorageDir(albumName: String): File? {>@>    // Get the directory for the user's public pictures directory.>@>    val file = File(Environment.getExternalStoragePublicDirectory(>@>            Environment.DIRECTORY_PICTURES), albumName)>@>    if (!file?.mkdirs()) {>@>        Log.e(LOG_TAG, ""Directory not created"")>@>    }>@>    return file>@>}>@>"
30629,2,">@>fun getPrivateAlbumStorageDir(context: Context, albumName: String): File? {>@>    // Get the directory for the app's private pictures directory.>@>    val file = File(context.getExternalFilesDir(>@>            Environment.DIRECTORY_PICTURES), albumName)>@>    if (!file?.mkdirs()) {>@>        Log.e(LOG_TAG, ""Directory not created"")>@>    }>@>    return file>@>}>@>"
1_21_3_0_0_5_0_0,1,>@>myFile.delete()>@>
1_21_4_0_0_2_0_0,1,">@>val sharedPref = activity?.getPreferences(Context.MODE_PRIVATE) ?: return>@>with (sharedPref.edit()) {>@>    putInt(getString(R.string.saved_high_score_key), newHighScore)>@>    commit()>@>}>@>"
30786,1,">@>public class Address {>@>    public String street;>@>    public String state;>@>    public String city;>@>>@>    @ColumnInfo(name = ""post_code"")>@>    public int postCode;>@>}>@>>@>@Entity>@>public class User {>@>    @PrimaryKey>@>    public int id;>@>>@>    public String firstName;>@>>@>    "
1_21_6_2_0_1_0_0,1,">@>Intent sendIntent = new Intent();>@>sendIntent.setAction(Intent.ACTION_SEND);>@>sendIntent.putExtra(Intent.EXTRA_TEXT, ""This is my text to send."");>@>sendIntent.setType(""text/plain"");>@>startActivity(Intent.createChooser(sendIntent, getResources().getText(R.string.send_to)));>@>"
1_21_6_4_0_2_0_0,1,">@>private var mShareActionProvider: ShareActionProvider? = null>@>...>@>>@>override fun onCreateOptionsMenu(menu: Menu): Boolean {>@>    // Inflate menu resource file.>@>    menuInflater.inflate(R.menu.share_menu, menu)>@>>@>    // Locate MenuItem with ShareActionProvider>@>    menu.findItem(R.id.menu_item_share).also { menuItem ->>@>        // Fetch and store ShareActionProvider>@>        mShareActionProvider = menuItem.actionProvider as? ShareActionProvider>@>    }>@>>@>    // Return true to display menu>@>    return true>@>}>@>>@>// Call to update the share intent>@>private fun setShareIntent(shareIntent: Intent) {>@>    mShareActionProvider?.setShareIntent(shareIntent)>@>}>@>"
1_21_7_3_0_2_1_0,1,">@>class MainActivity : Activity() {>@>>@>    // The path to the root of this app's internal storage>@>    private lateinit var mPrivateRootDir: File>@>    // The path to the ""images"" subdirectory>@>    private lateinit var mImagesDir: File>@>    // Array of files in the images subdirectory>@>    private lateinit var mImageFiles: Array<File>>@>    // Array of filenames corresponding to mImageFiles>@>    private lateinit var mImageFilenames: Array<String>>@>>@>    // Initialize the Activity>@>    override fun onCreate(savedInstanceState: Bundle?) {>@>        ...>@>        // Set up an Intent to send back to apps that request a file>@>        mResultIntent = Intent(""com.example.myapp.ACTION_RETURN_FILE"")>@>        // Get the files/ subdirectory of internal storage>@>        mPrivateRootDir = filesDir>@>        // Get the files/images subdirectory;>@>        mImagesDir = File(mPrivateRootDir, ""images"")>@>        // Get the files in the images subdirectory>@>        mImageFiles = mImagesDir.listFiles()>@>        // Set the Activity's result to null to begin with>@>        setResult(Activity.RESULT_CANCELED, null)>@>        /*>@>         * Display the file names in the ListView mFileListView.>@>         * Back the ListView with the array mImageFilenames, which>@>         * you can create by iterating through mImageFiles and>@>         * calling File.getAbsolutePath() for each File>@>         */>@>        ...>@>    }>@>    ...>@>}>@>"
1_21_7_3_0_2_1_0,2,">@>public class MainActivity extends Activity {>@>    // The path to the root of this app's internal storage>@>    private File mPrivateRootDir;>@>    // The path to the ""images"" subdirectory>@>    private File mImagesDir;>@>    // Array of files in the images subdirectory>@>    File[] mImageFiles;>@>    // Array of filenames corresponding to mImageFiles>@>    String[] mImageFilenames;>@>    // Initialize the Activity>@>    @Override>@>    protected void onCreate(Bundle savedInstanceState) {>@>        ...>@>        // Set up an Intent to send back to apps that request a file>@>        mResultIntent =>@>                new Intent(""com.example.myapp.ACTION_RETURN_FILE"");>@>        // Get the files/ subdirectory of internal storage>@>        mPrivateRootDir = getFilesDir();>@>        // Get the files/images subdirectory;>@>        mImagesDir = new File(mPrivateRootDir, ""images"");>@>        // Get the files in the images subdirectory>@>        mImageFiles = mImagesDir.listFiles();>@>        // Set the Activity's result to null to begin with>@>        setResult(Activity.RESULT_CANCELED, null);>@>        /*>@>         * Display the file names in the ListView mFileListView.>@>         * Back the ListView with the array mImageFilenames, which>@>         * you can create by iterating through mImageFiles and>@>         * calling File.getAbsolutePath() for each File>@>         */>@>         ...>@>    }>@>    ...>@>}>@>"
1_21_8_2_0_1_2_0,1,">@><uses-feature>@>    android:name=""android.hardware.nfc"">@>    android:required=""true"" />"
31313,2,>@>    ...>@>    fun handleFileUri(beamUri: Uri): File? =>@>            // Get the path part of the URI>@>            beamUri.path.let { fileName ->>@>                // Create a File object for this filename>@>                File(fileName)>@>                        // Get the file's parent directory>@>                        .parentFile>@>            }>@>    ...>@>
1_21_8_3_0_3_3_0,2,">@>    ...>@>    public String handleContentUri(Uri beamUri) {>@>        // Position of the filename in the query Cursor>@>        int filenameIndex;>@>        // File object for the filename>@>        File copiedFile;>@>        // The filename stored in MediaStore>@>        String fileName;>@>        // Test the authority of the URI>@>        if (!TextUtils.equals(beamUri.getAuthority(), MediaStore.AUTHORITY)) {>@>            /*>@>             * Handle content URIs for other content providers>@>             */>@>        // For a MediaStore content URI>@>        } else {>@>            // Get the column that contains the file name>@>            String[] projection = { MediaStore.MediaColumns.DATA };>@>            Cursor pathCursor =>@>                    getContentResolver().query(beamUri, projection,>@>                    null, null, null);>@>            // Check for a valid cursor>@>            if (pathCursor != null &&>@>                    pathCursor.moveToFirst()) {>@>                // Get the column index in the Cursor>@>                filenameIndex = pathCursor.getColumnIndex(>@>                        MediaStore.MediaColumns.DATA);>@>                // Get the full file name including path>@>                fileName = pathCursor.getString(filenameIndex);>@>                // Create a File object for the filename>@>                copiedFile = new File(fileName);>@>                // Return the parent directory of the file>@>                return copiedFile.getParentFile();>@>             } else {>@>                // The query didn't work; return null>@>                return null;>@>             }>@>        }>@>    }>@>    ...>@>"
31670,1,>@>// Sets the selection argument to the user's input>@>selectionArgs[0] = mUserInput;>@>
1_21_10_2_0_8_0_0,1,>@>content://com.example.trains/Line1>@>
31953,2,">@>public class ExampleProvider extends ContentProvider {>@>...>@>    // Creates a UriMatcher object.>@>    private static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);>@>>@>    static {>@>        /*>@>         * The calls to addURI() go here, for all of the content URI patterns that the provider>@>         * should recognize. For this snippet, only the calls for table 3 are shown.>@>         */>@>>@>        /*>@>         * Sets the integer value for multiple rows in table 3 to 1. Notice that no wildcard is used>@>         * in the path>@>         */>@>        uriMatcher.addURI(""com.example.app.provider"", ""table3"", 1);>@>>@>        /*>@>         * Sets the code for a single row to 2. In this case, the ""#"" wildcard is>@>         * used. ""content://com.example.app.provider/table3/3"" matches, but>@>         * ""content://com.example.app.provider/table3 doesn't.>@>         */>@>        uriMatcher.addURI(""com.example.app.provider"", ""table3/#"", 2);>@>    }>@>...>@>    // Implements ContentProvider.query()>@>    public Cursor query(>@>        Uri uri,>@>        String[] projection,>@>        String selection,>@>        String[] selectionArgs,>@>        String sortOrder) {>@>...>@>        /*>@>         * Choose the table to query and a sort order based on the code returned for the incoming>@>         * URI. Here, too, only the statements for table 3 are shown.>@>         */>@>        switch (uriMatcher.match(uri)) {>@>>@>>@>            // If the incoming URI was for all of table3>@>            case 1:>@>>@>                if (TextUtils.isEmpty(sortOrder)) sortOrder = ""_ID ASC"";>@>                break;>@>>@>            // If the incoming URI was for a single row>@>            case 2:>@>>@>                /*>@>                 * Because this URI was for a single row, the _ID value part is>@>                 * present. Get the last path segment from the URI; this is the _ID value.>@>                 * Then, append the value to the WHERE clause for the query>@>                 */>@>                selection = selection + ""_ID = "" + uri.getLastPathSegment();>@>                break;>@>>@>            default:>@>            ...>@>                // If the URI is not recognized, you should do some error handling here.>@>        }>@>        // call the code to actually do the query>@>    }>@>"
1_21_10_4_0_3_9_0,2,">@>private boolean isVirtualFile(Uri uri) {>@>    if (!DocumentsContract.isDocumentUri(this, uri)) {>@>        return false;>@>    }>@>>@>    Cursor cursor = getContentResolver().query(>@>        uri,>@>        new String[] { DocumentsContract.Document.COLUMN_FLAGS },>@>        null, null, null);>@>>@>    int flags = 0;>@>    if (cursor.moveToFirst()) {>@>        flags = cursor.getInt(0);>@>    }>@>    cursor.close();>@>>@>    return (flags & DocumentsContract.Document.FLAG_VIRTUAL_DOCUMENT) != 0;>@>}>@>"
1_21_10_5_0_2_0_0,2,"private static final String[] DEFAULT_ROOT_PROJECTION =>@>        new String[]{Root.COLUMN_ROOT_ID, Root.COLUMN_MIME_TYPES,>@>        Root.COLUMN_FLAGS, Root.COLUMN_ICON, Root.COLUMN_TITLE,>@>        Root.COLUMN_SUMMARY, Root.COLUMN_DOCUMENT_ID,>@>        Root.COLUMN_AVAILABLE_BYTES,};>@>private static final String[] DEFAULT_DOCUMENT_PROJECTION = new>@>        String[]{Document.COLUMN_DOCUMENT_ID, Document.COLUMN_MIME_TYPE,>@>        Document.COLUMN_DISPLAY_NAME, Document.COLUMN_LAST_MODIFIED,>@>        Document.COLUMN_FLAGS, Document.COLUMN_SIZE,};>@>"
1_21_10_5_0_3_2_0,1,"@Override>@>public Cursor queryChildDocuments(String parentDocumentId, String[] projection,>@>                              String sortOrder) throws FileNotFoundException {>@>>@>    final MatrixCursor result = new>@>            MatrixCursor(resolveDocumentProjection(projection));>@>    final File parent = getFileForDocId(parentDocumentId);>@>    for (File file : parent.listFiles()) {>@>        // Adds the file's display name, MIME type, size, and so on.>@>        includeFile(result, null, file);>@>    }>@>    return result;>@>}>@>"
1_22_3_2_0_1_2_0,1,">@><TextView>@>    android:layout_width=""match_parent"">@>    android:layout_height=""wrap_content"">@>    "
1_4_3_1_0_5_0_4,1,>@>$ adb shell settings get global autofill_compat_mode_allowed_packages>@>
1_22_4_0_0_4_1_0,1,">@>long calID = 3;>@>long startMillis = 0;>@>long endMillis = 0;>@>Calendar beginTime = Calendar.getInstance();>@>beginTime.set(2012, 9, 14, 7, 30);>@>startMillis = beginTime.getTimeInMillis();>@>Calendar endTime = Calendar.getInstance();>@>endTime.set(2012, 9, 14, 8, 45);>@>endMillis = endTime.getTimeInMillis();>@>...>@>>@>ContentResolver cr = getContentResolver();>@>ContentValues values = new ContentValues();>@>values.put(Events.DTSTART, startMillis);>@>values.put(Events.DTEND, endMillis);>@>values.put(Events.TITLE, ""Jazzercise"");>@>values.put(Events.DESCRIPTION, ""Group workout"");>@>values.put(Events.CALENDAR_ID, calID);>@>values.put(Events.EVENT_TIMEZONE, ""America/Los_Angeles"");>@>Uri uri = cr.insert(Events.CONTENT_URI, values);>@>>@>// get the event ID that is the last element in the Uri>@>long eventID = Long.parseLong(uri.getLastPathSegment());>@>//>@>// ... do something with event ID>@>//>@>//"
1_22_4_0_0_8_2_0,1,"long eventID = 208;>@>Uri uri = ContentUris.withAppendedId(Events.CONTENT_URI, eventID);>@>Intent intent = new Intent(Intent.ACTION_EDIT)>@>    .setData(uri)>@>    .putExtra(Events.TITLE, ""My New Title"");>@>startActivity(intent);"
34001,1,">@>    <uses-permission android:name=""android.permission.READ_CONTACTS"" />>@>"
1_22_5_4_0_1_1_0,1,">@>/* Assumes EditText fields in your UI contain an email address>@> * and a phone number.>@> *>@> */>@>private EditText mEmailAddress = (EditText) findViewById(R.id.email);>@>private EditText mPhoneNumber = (EditText) findViewById(R.id.phone);>@>...>@>/*>@> * Inserts new data into the Intent. This data is passed to the>@> * contacts app's Insert screen>@> */>@>// Inserts an email address>@>intent.putExtra(Intents.Insert.EMAIL, mEmailAddress.getText())>@>/*>@> * In this example, sets the email type to be a work email.>@> * You can set other email types as necessary.>@> */>@>      .putExtra(Intents.Insert.EMAIL_TYPE, CommonDataKinds.Email.TYPE_WORK)>@>// Inserts a phone number>@>      .putExtra(Intents.Insert.PHONE, mPhoneNumber.getText())>@>/*>@> * In this example, sets the phone type to be a work phone.>@> * You can set other phone types as necessary.>@> */>@>      .putExtra(Intents.Insert.PHONE_TYPE, Phone.TYPE_WORK);>@>>@>"
1_22_5_4_0_2_2_0,1,">@>    // Sets the special extended data for navigation>@>    editIntent.putExtra(""finishActivityOnSaveCompleted"", true);>@>"
1_22_7_3_0_6_0_0,2,>@>PackageInfo info;>@>try {>@>    String name = 
1_22_7_3_1_4_2_0,2,>@>try {>@>    synchronized (MyActivity.sDataLock) {>@>        File dataFile = new File(
1_22_7_4_0_6_0_0,1,>@>I/BackupManagerService: Full backup not currently possible -- key/value backup not yet run?>@>
1_22_7_4_0_6_0_0,1,>@>01-31 14:32:45.698 17280 17292 I Backup: [GmsBackupTransport] Try to backup for an uninitialized backup account.>@>01-31 14:32:45.699  1043 18255 W PFTBT: Transport failed; aborting backup: -1001>@>01-31 14:32:45.699  1043 18255 I PFTBT: Full backup completed with status: -1000>@>
35136,1,">@><manifest ... >>@>    <uses-permission android:name=""android.permission.GET_ACCOUNTS"" />>@>    ...>@></manifest>>@>"
1_22_9_3_0_2_0_0,1,">@>AccountManager am = AccountManager.get(this);>@>Bundle options = new Bundle();>@>>@>am.getAuthToken(>@>    myAccount_,                     // Account retrieved using getAccountsByType()>@>    ""Manage your tasks"",            // Auth scope>@>    options,                        // Authenticator-specific options>@>    this,                           // Your activity>@>    new OnTokenAcquired(),          // Callback called when a token is successfully acquired>@>    new Handler(new OnError()));    // Callback called if an error occurs>@>"
1_23_3_0_0_4_0_0,1,>@>fusedLocationClient.lastLocation>@>        .addOnSuccessListener { location : Location? ->>@>            // Got last known location. In some rare situations this can be null.>@>        }>@>
1_23_3_0_0_4_0_0,1,">@>mFusedLocationClient.getLastLocation()>@>        .addOnSuccessListener(this, new OnSuccessListener<Location>() {>@>            @Override>@>            public void onSuccess(Location location) {>@>                // Got last known location. In some rare situations this can be null.>@>                if (location != null) {>@>                    // Logic to handle location object>@>                }>@>            }>@>        });>@>"
35533,1,>@>@Override>@>protected void onResume() {>@>    super.onResume();>@>    if (mRequestingLocationUpdates) {>@>        startLocationUpdates();>@>    }>@>}>@>
35574,1,">@><manifest xmlns:android=""http://schemas.android.com/apk/res/android"">@>    package=""com.google.android.gms.location.sample.locationaddress"" >>@>    <application>@>        ...>@>        <service>@>            android:name="".FetchAddressIntentService"">@>            android:exported=""false""/>>@>    </application>>@>    ...>@></manifest>>@>"
1_23_6_0_0_3_0_0,1,">@>public class MainActivity extends AppCompatActivity implements>@>        ConnectionCallbacks, OnConnectionFailedListener {>@>>@>    protected Location mLastLocation;>@>    private AddressResultReceiver mResultReceiver;>@>>@>    // ...>@>>@>    protected void startIntentService() {>@>        Intent intent = new Intent(this, FetchAddressIntentService.class);>@>        intent.putExtra(Constants.RECEIVER, mResultReceiver);>@>        intent.putExtra(Constants.LOCATION_DATA_EXTRA, mLastLocation);>@>        startService(intent);>@>    }>@>}>@>"
1_23_6_0_0_3_0_0,1,">@>private void fetchAddressButtonHander(View view) {>@>    mFusedLocationClient.getLastLocation()>@>            .addOnSuccessListener(this, new OnSuccessListener<Location>() {>@>                @Override>@>                public void onSuccess(Location location) {>@>                    mLastKnownLocation = location;>@>>@>                    // In some rare cases the location returned can be null>@>                    if (mLastKnownLocation == null) {>@>                        return;>@>                    }>@>>@>                    if (!Geocoder.isPresent()) {>@>                        Toast.makeText(MainActivity.this,>@>                                R.string.no_geocoder_available,>@>                                Toast.LENGTH_LONG).show();>@>                        return;>@>                    }>@>>@>                    // Start service and update UI to reflect new location>@>                    startIntentService();>@>                    updateUI();>@>                }>@>            });>@>    }>@>"
35649,1,">@><uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION""/>>@>"
35689,1,>@>geofencingClient?.removeGeofences(geofencePendingIntent)?.run {>@>    addOnSuccessListener {>@>        // Geofences removed>@>        // ...>@>    }>@>    addOnFailureListener {>@>        // Failed to remove geofences>@>        // ...>@>    }>@>}>@>
35689,1,">@>mGeofencingClient.removeGeofences(getGeofencePendingIntent())>@>        .addOnSuccessListener(this, new OnSuccessListener<Void>() {>@>            @Override>@>            public void onSuccess(Void aVoid) {>@>                // Geofences removed>@>                // ...>@>            }>@>        })>@>        .addOnFailureListener(this, new OnFailureListener() {>@>            @Override>@>            public void onFailure(@NonNull Exception e) {>@>                // Failed to remove geofences>@>                // ...>@>            }>@>        });>@>"
1_24_3_2_0_2_1_0,1,"public class MainActivity extends Activity implements>@>        GestureDetector.OnGestureListener,>@>        GestureDetector.OnDoubleTapListener{>@>>@>    private static final String DEBUG_TAG = ""Gestures"";>@>    private GestureDetectorCompat mDetector;>@>>@>    // Called when the activity is first created.>@>    @Override>@>    public void onCreate(Bundle savedInstanceState) {>@>        super.onCreate(savedInstanceState);>@>        setContentView(R.layout.activity_main);>@>        // Instantiate the gesture detector with the>@>        // application context and an implementation of>@>        // GestureDetector.OnGestureListener>@>        mDetector = new GestureDetectorCompat(this,this);>@>        // Set the gesture detector as the double tap>@>        // listener.>@>        mDetector.setOnDoubleTapListener(this);>@>    }>@>>@>    @Override>@>    public boolean onTouchEvent(MotionEvent event){>@>        if (this.mDetector.onTouchEvent(event)) {>@>            return true;>@>        }>@>        return super.onTouchEvent(event);>@>    }>@>>@>    @Override>@>    public boolean onDown(MotionEvent event) {>@>        Log.d(DEBUG_TAG,""onDown: "" + event.toString());>@>        return true;>@>    }>@>>@>    @Override>@>    public boolean onFling(MotionEvent event1, MotionEvent event2,>@>            float velocityX, float velocityY) {>@>        Log.d(DEBUG_TAG, ""onFling: "" + event1.toString() + event2.toString());>@>        return true;>@>    }>@>>@>    @Override>@>    public void onLongPress(MotionEvent event) {>@>        Log.d(DEBUG_TAG, ""onLongPress: "" + event.toString());>@>    }>@>>@>    @Override>@>    public boolean onScroll(MotionEvent event1, MotionEvent event2, float distanceX,>@>            float distanceY) {>@>        Log.d(DEBUG_TAG, ""onScroll: "" + event1.toString() + event2.toString());>@>        return true;>@>    }>@>>@>    @Override>@>    public void onShowPress(MotionEvent event) {>@>        Log.d(DEBUG_TAG, ""onShowPress: "" + event.toString());>@>    }>@>>@>    @Override>@>    public boolean onSingleTapUp(MotionEvent event) {>@>        Log.d(DEBUG_TAG, ""onSingleTapUp: "" + event.toString());>@>        return true;>@>    }>@>>@>    @Override>@>    public boolean onDoubleTap(MotionEvent event) {>@>        Log.d(DEBUG_TAG, ""onDoubleTap: "" + event.toString());>@>        return true;>@>    }>@>>@>    @Override>@>    public boolean onDoubleTapEvent(MotionEvent event) {>@>        Log.d(DEBUG_TAG, ""onDoubleTapEvent: "" + event.toString());>@>        return true;>@>    }>@>>@>    @Override>@>    public boolean onSingleTapConfirmed(MotionEvent event) {>@>        Log.d(DEBUG_TAG, ""onSingleTapConfirmed: "" + event.toString());>@>        return true;>@>    }>@>}"
1_24_3_4_0_2_0_0,1,"private Point computeScrollSurfaceSize() {>@>    return new Point(>@>            (int) (mContentRect.width() * (AXIS_X_MAX - AXIS_X_MIN)>@>                    / mCurrentViewport.width()),>@>            (int) (mContentRect.height() * (AXIS_Y_MAX - AXIS_Y_MIN)>@>                    / mCurrentViewport.height()));>@>}"
1_24_3_7_0_2_0_0,1,"ViewConfiguration vc = ViewConfiguration.get(view.getContext());>@>private int mSlop = vc.getScaledTouchSlop();>@>private int mMinFlingVelocity = vc.getScaledMinimumFlingVelocity();>@>private int mMaxFlingVelocity = vc.getScaledMaximumFlingVelocity();>@>>@>...>@>>@>case MotionEvent.ACTION_MOVE: {>@>    ...>@>    float deltaX = motionEvent.getRawX() - mDownX;>@>    if (Math.abs(deltaX) > mSlop) {>@>        // A swipe occurred, do something>@>    }>@>>@>...>@>>@>case MotionEvent.ACTION_UP: {>@>    ...>@>    } if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity>@>            && velocityY < velocityX) {>@>        // The criteria have been satisfied, do something>@>    }>@>}"
1_24_4_2_0_4_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><AutoCompleteTextView xmlns:android=""http://schemas.android.com/apk/res/android"">@>    android:id=""@+id/autocomplete_country"">@>    android:layout_width=""fill_parent"">@>    android:layout_height=""wrap_content"" />>@>"
1_24_4_3_0_3_0_0,1,">@>    <activity>@>        android:windowSoftInputMode=""stateVisible|adjustResize"" ... >>@>        ...>@>    </activity>>@>"
36631,1,">@><!-- Declares the input method service -->>@><service android:name=""FastInputIME"">@>    android:label=""@string/fast_input_label"">@>    android:permission=""android.permission.BIND_INPUT_METHOD"">>@>    <intent-filter>>@>        <action android:name=""android.view.InputMethod"" />>@>    </intent-filter>>@>    <meta-data android:name=""android.view.im"">@>               android:resource=""@xml/method"" />>@></service>>@>"
1_24_6_1_0_6_0_0,1,">@><input-method xmlns:android=""http://schemas.android.com/apk/res/android"">@>        android:settingsActivity=""com.example.softkeyboard.Settings"">@>        android:icon=""@drawable/ime_icon"">>@>    <subtype android:name=""@string/display_name_english_keyboard_ime"">@>            android:icon=""@drawable/subtype_icon_english_keyboard_ime"">@>            android:imeSubtypeLanguage=""en_US"">@>            android:imeSubtypeMode=""keyboard"">@>            android:imeSubtypeExtraValue=""somePrivateOption=true"" />>@>    <subtype android:name=""@string/display_name_french_keyboard_ime"">@>            android:icon=""@drawable/subtype_icon_french_keyboard_ime"">@>            android:imeSubtypeLanguage=""fr_FR"">@>            android:imeSubtypeMode=""keyboard"">@>            android:imeSubtypeExtraValue=""foobar=30,someInternalOption=false"" />>@>    <subtype android:name=""@string/display_name_german_keyboard_ime"" ... />>@></input-method>>@>"
36981,1,">@><manifest ... >>@>    <uses-feature android:name=""android.hardware.camera"">@>                  android:required=""true"" />>@>    ...>@></manifest>>@>"
1_25_2_0_0_2_0_0,1,">@>static final int REQUEST_IMAGE_CAPTURE = 1;>@>>@>private void dispatchTakePictureIntent() {>@>    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);>@>    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {>@>        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);>@>    }>@>}>@>"
1_25_5_0_0_3_0_0,1,">@><uses-feature android:name=""android.hardware.camera"" />>@>"
1_25_5_0_0_5_4_0,2,">@>/** A basic Camera preview class */>@>class CameraPreview(>@>        context: Context,>@>        private val mCamera: Camera>@>) : SurfaceView(context), SurfaceHolder.Callback {>@>>@>    private val mHolder: SurfaceHolder = holder.apply {>@>        // Install a SurfaceHolder.Callback so we get notified when the>@>        // underlying surface is created and destroyed.>@>        addCallback(this@CameraPreview)>@>        // deprecated setting, but required on Android versions prior to 3.0>@>        setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS)>@>    }>@>>@>    override fun surfaceCreated(holder: SurfaceHolder) {>@>        // The Surface has been created, now tell the camera where to draw the preview.>@>        mCamera.apply {>@>            try {>@>                setPreviewDisplay(holder)>@>                startPreview()>@>            } catch (e: IOException) {>@>                Log.d(TAG, ""Error setting camera preview: ${e.message}"")>@>            }>@>        }>@>    }>@>>@>    override fun surfaceDestroyed(holder: SurfaceHolder) {>@>        // empty. Take care of releasing the Camera preview in your activity.>@>    }>@>>@>    override fun surfaceChanged(holder: SurfaceHolder, format: Int, w: Int, h: Int) {>@>        // If your preview can change or rotate, take care of those events here.>@>        // Make sure to stop the preview before resizing or reformatting it.>@>        if (mHolder.surface == null) {>@>            // preview surface does not exist>@>            return>@>        }>@>>@>        // stop preview before making changes>@>        try {>@>            mCamera.stopPreview()>@>        } catch (e: Exception) {>@>            // ignore: tried to stop a non-existent preview>@>        }>@>>@>        // set preview size and make any resize, rotate or>@>        // reformatting changes here>@>>@>        // start preview with new settings>@>        mCamera.apply {>@>            try {>@>                setPreviewDisplay(mHolder)>@>                startPreview()>@>            } catch (e: Exception) {>@>                Log.d(TAG, ""Error starting camera preview: ${e.message}"")>@>            }>@>        }>@>    }>@>}>@>"
1_25_5_0_0_7_1_0,1,>@>val params: Camera.Parameters? = mCamera?.parameters>@>val focusModes: List<String>? = params?.supportedFocusModes>@>if (focusModes?.contains(Camera.Parameters.FOCUS_MODE_AUTO) == true) {>@>    // Autofocus mode is supported>@>}>@>
37297,1,>@>val params: Camera.Parameters? = mCamera?.parameters>@>params?.focusMode = Camera.Parameters.FOCUS_MODE_AUTO>@>mCamera?.parameters = params>@>
37335,1,">@>override fun surfaceCreated(holder: SurfaceHolder) {>@>    try {>@>        mCamera.setPreviewDisplay(holder)>@>        mCamera.startPreview()>@>>@>        startFaceDetection() // start face detection feature>@>    } catch (e: IOException) {>@>        Log.d(TAG, ""Error setting camera preview: ${e.message}"")>@>    }>@>}>@>>@>override fun surfaceChanged(holder: SurfaceHolder, format: Int, w: Int, h: Int) {>@>    if (holder.surface == null) {>@>        // preview surface does not exist>@>        Log.d(TAG, ""holder.getSurface() == null"")>@>        return>@>    }>@>    try {>@>        mCamera.stopPreview()>@>    } catch (e: Exception) {>@>        // ignore: tried to stop a non-existent preview>@>        Log.d(TAG, ""Error stopping camera preview: ${e.message}"")>@>    }>@>    try {>@>        mCamera.setPreviewDisplay(holder)>@>        mCamera.startPreview()>@>>@>        startFaceDetection() // re-start face detection feature>@>    } catch (e: Exception) {>@>        // ignore: tried to stop a non-existent preview>@>        Log.d(TAG, ""Error starting camera preview: ${e.message}"")>@>    }>@>}>@>"
1_26_2_0_0_2_0_0,1,>@>private lateinit var mSensorManager: SensorManager>@>...>@>mSensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager>@>
1_26_2_0_0_2_0_0,1,>@>private SensorManager mSensorManager;>@>...>@>mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);>@>
1_26_2_0_0_3_0_0,1,">@>public class SensorActivity extends Activity implements SensorEventListener {>@>    private SensorManager mSensorManager;>@>    private Sensor mLight;>@>>@>    @Override>@>    public final void onCreate(Bundle savedInstanceState) {>@>        super.onCreate(savedInstanceState);>@>        setContentView(R.layout.main);>@>>@>        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);>@>        mLight = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);>@>    }>@>>@>    @Override>@>    public final void onAccuracyChanged(Sensor sensor, int accuracy) {>@>        // Do something here if sensor accuracy changes.>@>    }>@>>@>    @Override>@>    public final void onSensorChanged(SensorEvent event) {>@>        // The light sensor returns a single value.>@>        // Many sensors return 3 values, one for each axis.>@>        float lux = event.values[0];>@>        // Do something with this sensor value.>@>    }>@>>@>    @Override>@>    protected void onResume() {>@>        super.onResume();>@>        mSensorManager.registerListener(this, mLight, SensorManager.SENSOR_DELAY_NORMAL);>@>    }>@>>@>    @Override>@>    protected void onPause() {>@>        super.onPause();>@>        mSensorManager.unregisterListener(this);>@>    }>@>}>@>"
1_26_3_0_0_2_0_0,1,>@>linear acceleration = acceleration - acceleration due to gravity>@>
1_26_3_0_0_7_1_0,1,">@>override fun onSensorChanged(event: SensorEvent) {>@>    // In this example, alpha is calculated as t / (t + dT),>@>    // where t is the low-pass filter's time-constant and>@>    // dT is the event delivery rate.>@>>@>    val alpha: Float = 0.8f>@>>@>    // Isolate the force of gravity with the low-pass filter.>@>    gravity[0] = alpha * gravity[0] + (1 - alpha) * event.values[0]>@>    gravity[1] = alpha * gravity[1] + (1 - alpha) * event.values[1]>@>    gravity[2] = alpha * gravity[2] + (1 - alpha) * event.values[2]>@>>@>    // Remove the gravity contribution with the high-pass filter.>@>    linear_acceleration[0] = event.values[0] - gravity[0]>@>    linear_acceleration[1] = event.values[1] - gravity[1]>@>    linear_acceleration[2] = event.values[2] - gravity[2]>@>}>@>"
1_27_2_2_0_5_0_0,1,">@>/**>@> * Converts the contents of an InputStream to a String.>@> */>@>public String readStream(InputStream stream, int maxReadSize)>@>        throws IOException, UnsupportedEncodingException {>@>    Reader reader = null;>@>    reader = new InputStreamReader(stream, ""UTF-8"");>@>    char[] rawBuffer = new char[maxReadSize];>@>    int readSize;>@>    StringBuffer buffer = new StringBuffer();>@>    while (((readSize = reader.read(rawBuffer)) != -1) && maxReadSize > 0) {>@>        if (readSize > maxReadSize) {>@>            readSize = maxReadSize;>@>        }>@>        buffer.append(rawBuffer, 0, readSize);>@>        maxReadSize -= readSize;>@>    }>@>    return buffer.toString();>@>}>@>"
38019,1,">@>public static NetworkFragment getInstance(FragmentManager fragmentManager, String url) {>@>    // Recover NetworkFragment in case we are re-creating the Activity due to a config change.>@>    // This is necessary because NetworkFragment might have a task that began running before>@>    // the config change occurred and has not finished yet.>@>    // The NetworkFragment is recoverable because it calls setRetainInstance(true).>@>    NetworkFragment networkFragment = (NetworkFragment) fragmentManager>@>            .findFragmentByTag(NetworkFragment.TAG);>@>    if (networkFragment == null) {>@>        networkFragment = new NetworkFragment();>@>        Bundle args = new Bundle();>@>        args.putString(URL_KEY, url);>@>        networkFragment.setArguments(args);>@>        fragmentManager.beginTransaction().add(networkFragment, TAG).commit();>@>    }>@>    return networkFragment;>@>}>@>"
1_27_3_3_0_1_0_0,1,">@>RequestQueue mRequestQueue;>@>>@>// Instantiate the cache>@>Cache cache = new DiskBasedCache(getCacheDir(), 1024 * 1024); // 1MB cap>@>>@>// Set up the network to use HttpURLConnection as the HTTP client.>@>Network network = new BasicNetwork(new HurlStack());>@>>@>// Instantiate the RequestQueue with the cache and network.>@>mRequestQueue = new RequestQueue(cache, network);>@>>@>// Start the queue>@>mRequestQueue.start();>@>>@>String url =""http://www.example.com"";>@>>@>// Formulate the request and handle the response.>@>StringRequest stringRequest = new StringRequest(Request.Method.GET, url,>@>        new Response.Listener<String>() {>@>    @Override>@>    public void onResponse(String response) {>@>        // Do something with the response>@>    }>@>},>@>    new Response.ErrorListener() {>@>        @Override>@>        public void onErrorResponse(VolleyError error) {>@>            // Handle error>@>    }>@>});>@>>@>// Add the request to the RequestQueue.>@>mRequestQueue.add(stringRequest);>@>>@>// ...>@>"
1_27_5_2_0_6_0_0,1,">@>private class IdentifyTransferSpikeTask : AsyncTask<String, Nothing, String>() {>@>>@>    override fun onPreExecute() = TrafficStats.setThreadStatsTag(0xF00D)>@>>@>    override fun doInBackground(vararg urls: String): String {>@>        try {>@>            // Make network request using HttpURLConnection.connect()>@>        }>@>    }>@>>@>    override fun onPostExecute(result: String) = TrafficStats.clearThreadStatsTag()>@>}>@>"
1_27_5_4_0_1_0_0,1,">@>// url represents the website containing the content to place into the cache.>@>HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();>@>>@>long currentTime = System.currentTimeMillis();>@>long expires = conn.getHeaderFieldDate(""Expires"", currentTime);>@>long lastModified = conn.getHeaderFieldDate(""Last-Modified"", currentTime);>@>>@>// lastUpdateTime represents when the cache was last updated.>@>if (lastModified < lastUpdateTime) {>@>    // Skip update>@>} else {>@>    // Parse update>@>    lastUpdateTime = lastModified;>@>}>@>"
1_27_8_0_0_2_0_0,1,"BluetoothHeadset mBluetoothHeadset;>@>>@>// Get the default adapter>@>BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();>@>>@>private BluetoothProfile.ServiceListener mProfileListener = new BluetoothProfile.ServiceListener() {>@>    public void onServiceConnected(int profile, BluetoothProfile proxy) {>@>        if (profile == BluetoothProfile.HEADSET) {>@>            mBluetoothHeadset = (BluetoothHeadset) proxy;>@>        }>@>    }>@>    public void onServiceDisconnected(int profile) {>@>        if (profile == BluetoothProfile.HEADSET) {>@>            mBluetoothHeadset = null;>@>        }>@>    }>@>};>@>>@>// Establish connection to the proxy.>@>mBluetoothAdapter.getProfileProxy(context, mProfileListener, BluetoothProfile.HEADSET);>@>>@>// ... call functions on mBluetoothHeadset>@>>@>// Close proxy connection after use.>@>mBluetoothAdapter.closeProfileProxy(mBluetoothHeadset);>@>"
1_27_8_0_0_4_0_0,1,">@>if (!mBluetoothAdapter.isEnabled()) {>@>    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);>@>    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);>@>}>@>"
39861,1,">@>NdefRecord rtdUriRecord1 = NdefRecord.createUri(""http://example.com"");>@>"
39862,1,">@>Uri uri = new Uri(""http://example.com"");>@>NdefRecord rtdUriRecord2 = NdefRecord.createUri(uri);>@>"
1_27_9_2_0_4_5_0,1,">@>byte[] payload;>@>...>@>NdefRecord extRecord = new NdefRecord(>@>    NdefRecord.TNF_EXTERNAL_TYPE, ""com.example:externalType"", new byte[0], payload);>@>"
39985,1,>@>techListsArray = new String[][] { new String[] { NfcF.class.getName() } };>@>
1_27_9_4_0_5_3_0,1,">@><host-apdu-service xmlns:android=""http://schemas.android.com/apk/res/android"">@>           android:description=""@string/servicedesc"">@>           android:requireDeviceUnlock=""false"">>@>    <aid-group android:description=""@string/aiddescription"">@>               android:category=""other"">>@>        <aid-filter android:name=""F0010203040506""/>>@>        <aid-filter android:name=""F0394148148100""/>>@>    </aid-group>>@></host-apdu-service>>@>"
1_27_11_2_0_2_0_0,1,">@>/**>@> * A BroadcastReceiver that notifies of important Wi-Fi p2p events.>@> */>@>public class WiFiDirectBroadcastReceiver extends BroadcastReceiver {>@>>@>    private WifiP2pManager mManager;>@>    private Channel mChannel;>@>    private MyWiFiActivity mActivity;>@>>@>    public WiFiDirectBroadcastReceiver(WifiP2pManager manager, Channel channel,>@>            MyWifiActivity activity) {>@>        super();>@>        this.mManager = manager;>@>        this.mChannel = channel;>@>        this.mActivity = activity;>@>    }>@>>@>    @Override>@>    public void onReceive(Context context, Intent intent) {>@>        String action = intent.getAction();>@>>@>        if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {>@>            // Check to see if Wi-Fi is enabled and notify appropriate activity>@>        } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {>@>            // Call WifiP2pManager.requestPeers() to get a list of current peers>@>        } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {>@>            // Respond to new connection or disconnections>@>        } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {>@>            // Respond to this device's wifi state changing>@>        }>@>    }>@>}>@>"
1_27_11_2_0_3_0_0,1,">@><uses-sdk android:minSdkVersion=""14"" />>@><uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />>@><uses-permission android:name=""android.permission.CHANGE_WIFI_STATE"" />>@><uses-permission android:name=""android.permission.CHANGE_NETWORK_STATE"" />>@><uses-permission android:name=""android.permission.INTERNET"" />>@><uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"" />>@>"
40499,1,">@>@Override>@>public void onReceive(Context context, Intent intent) {>@>    ...>@>    String action = intent.getAction();>@>    if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {>@>        int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);>@>        if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {>@>            // Wifi P2P is enabled>@>        } else {>@>            // Wi-Fi P2P is not enabled>@>        }>@>    }>@>    ...>@>}>@>"
1_27_13_2_0_4_1_1,1,>@>val accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY) as UsbAccessory>@>
40872,2,">@>UsbManager mUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);>@>private static final String ACTION_USB_PERMISSION =>@>    ""com.android.example.USB_PERMISSION"";>@>...>@>mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);>@>IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);>@>registerReceiver(mUsbReceiver, filter);>@>"
41256,2,">@>        mManager.discoverServices(>@>                channel,>@>                object : WifiP2pManager.ActionListener {>@>                    override fun onSuccess() {>@>                        // Success!>@>                    }>@>>@>                    override fun onFailure(code: Int) {>@>                        // Command failed. Check for P2P_UNSUPPORTED, ERROR, or BUSY>@>                        when (code) {>@>                            WifiP2pManager.P2P_UNSUPPORTED -> {>@>                                Log.d(TAG, ""P2P isn't supported on this device."")>@>                            }>@>                        }>@>                    }>@>                }>@>        )>@>"
1_4_3_1_0_5_0_4,1,ScriptC_invert invert = new ScriptC_invert(mRenderScript);
1_9_3_6_0_1_0_0,2,>@>// Method 1>@>public 
1_9_3_8_0_1_0_0,2,>@>ScriptC_example script = new ScriptC_example(mRenderScript);>@>>@>// 1D array>@>//   and obtain answer immediately>@>int input1[] = 
1_28_2_0_0_2_3_0,1,>@>typedef struct Point {>@>    float2 position;>@>    float size;>@>} Point_t;>@>
1_28_2_0_0_4_2_1,1,>@>point.x = 1;>@>point.y = 1;>@>
1_29_3_0_0_2_1_0,1,">@>public class MyWebViewClient extends WebViewClient {>@>    // Automatically go ""back to safety"" when attempting to load a website that>@>    // Google has identified as a known threat. An instance of WebView calls>@>    // this method only after Safe Browsing is initialized, so there's no>@>    // conditional logic needed here.>@>    @Override>@>    public void onSafeBrowsingHit(WebView view, WebResourceRequest request,>@>            int threatType, SafeBrowsingResponse callback) {>@>        // The ""true"" argument indicates that your app reports incidents like>@>        // this one to Safe Browsing.>@>        callback.backToSafety(true);>@>        Toast.makeText(view.getContext(), ""Unsafe web page blocked."",>@>                Toast.LENGTH_LONG).show();>@>    }>@>}>@>"
1_29_3_0_0_5_0_0,2,">@>public class MyRendererTrackingWebViewClient extends WebViewClient {>@>    private WebView mWebView;>@>>@>    @Override>@>    public boolean onRenderProcessGone(WebView view,>@>            RenderProcessGoneDetail detail) {>@>        if (!detail.didCrash()) {>@>            // Renderer was killed because the system ran out of memory.>@>            // The app can recover gracefully by creating a new WebView instance>@>            // in the foreground.>@>            Log.e(""MY_APP_TAG"", ""System killed the WebView rendering process "" +>@>                    ""to reclaim memory. Recreating..."");>@>>@>            if (mWebView != null) {>@>                ViewGroup webViewContainer =>@>                        (ViewGroup) findViewById(R.id.my_web_view_container);>@>                webViewContainer.removeView(mWebView);>@>                mWebView.destroy();>@>                mWebView = null;>@>            }>@>>@>            // By this point, the instance variable ""mWebView"" is guaranteed>@>            // to be null, so it's safe to reinitialize it.>@>>@>            return true; // The app continues executing.>@>        }>@>>@>        // Renderer crashed because of an internal error, such as a memory>@>        // access violation.>@>        Log.e(""MY_APP_TAG"", ""The WebView rendering process crashed!"");>@>>@>        // In this example, the app itself crashes after detecting that the>@>        // renderer crashed. If you choose to handle the crash more gracefully>@>        // and allow your app to continue executing, you should 1) destroy the>@>        // current WebView instance, 2) specify logic for how the app can>@>        // continue executing, and 3) return ""true"" instead.>@>        return false;>@>    }>@>}>@>"
1_29_4_0_0_1_0_0,1,">@>Mozilla/5.0 (Linux; Android 4.4; Nexus 4 Build/KRT16H) AppleWebKit/537.36>@>(KHTML, like Gecko) Version/4.0 "
1_29_5_0_0_2_0_0,1,">@><link rel=""stylesheet"" media=""screen and (-webkit-device-pixel-ratio: 1.5)"" href=""hdpi.css"" />>@><link rel=""stylesheet"" media=""screen and (-webkit-device-pixel-ratio: 1.0)"" href=""mdpi.css"" />>@>"
1_29_7_0_0_0_0_0,1,">@><meta name=""viewport"" content=""width=device-width, initial-scale=1.0, user-scalable=no"">>@>"
43436,2,>@>bundletool build-bundle --modules=
1_31_2_2_0_3_0_0,1,">@><manifest xmlns:android=""http://schemas.android.com/apk/res/android"">@>          "
1_31_2_2_1_3_0_0,2,>@>dependencies {>@>    
1_31_2_2_1_3_0_0,1,">@><manifest xmlns:android=""http://schemas.android.com/apk/res/android"">@>          "
44207,1,">@>android {>@>  ...>@>  generatePureSplits = true>@>  splits {>@>    abi {>@>      enable = true>@>    }>@>    density {>@>      enable = true>@>    }>@>    language {>@>      enable = true>@>      include ""es-rMX"", ""zh"", ""en"">@>    }>@>  }>@>}>@>"
1_33_2_0_0_4_0_0,1,">@>dependencies {>@>// ...>@>    implementation ""androidx.slice:slice-builders:(latest version)"">@>// ...>@>}>@>  "
1_33_2_0_0_5_0_0,1,">@>fun createSlice(sliceUri: Uri): Slice {>@>    val activityAction = createActivityAction()>@>    return list(context, sliceUri, INFINITY) {>@>        row {>@>            title = ""Perform action in app"">@>            primaryAction = activityAction>@>        }>@>    }>@>}>@>>@>fun createActivityAction(): SliceAction {>@>    val intent = Intent(context, MainActivity::class.java)>@>    return SliceAction.create(>@>        PendingIntent.getActivity(context, 0, Intent(context, MainActivity::class.java), 0),>@>        IconCompat.createWithResource(context, R.drawable.ic_home),>@>        ListBuilder.ICON_IMAGE,>@>        ""Enter app"">@>    )>@>}"
1_33_2_0_0_5_0_0,2,">@>public class MyBroadcastReceiver extends BroadcastReceiver {>@>>@>    public static String EXTRA_MESSAGE = ""message"";>@>>@>    @Override>@>    public void onReceive(Context context, Intent intent) {>@>        if (intent.hasExtra(EXTRA_TOGGLE_STATE)) {>@>            Toast.makeText(context, ""Toggled:  "" + intent.getBooleanExtra(>@>                    EXTRA_TOGGLE_STATE, false),>@>                    Toast.LENGTH_LONG).show();>@>        }>@>    }>@>}>@>"
1_33_2_0_0_6_0_0,1,">@>public Slice createDynamicSlice(Uri sliceUri) {>@>    if (getContext() == null || sliceUri.getPath() == null) {>@>        return null;>@>    }>@>    ListBuilder listBuilder = new ListBuilder(getContext(), sliceUri, ListBuilder.INFINITY);>@>    switch (sliceUri.getPath()) {>@>        case ""/count"":>@>            SliceAction toastAndIncrementAction = SliceAction.create(>@>                    createToastAndIncrementIntent(""Item clicked.""),>@>                    actionIcon,>@>                    ListBuilder.ICON_IMAGE,>@>                    ""Increment."">@>            );>@>            listBuilder.addRow(>@>                    new ListBuilder.RowBuilder()>@>                            .setPrimaryAction(toastAndIncrementAction)>@>                            .setTitle(""Count: "" + MyBroadcastReceiver.sReceivedCount)>@>                            .setSubtitle(""Click me"")>@>            );>@>            break;>@>        default:>@>            listBuilder.addRow(>@>                    new ListBuilder.RowBuilder()>@>                            .setPrimaryAction(createActivityAction())>@>                            .setTitle(""URI not found."")>@>            );>@>            break;>@>    }>@>    return listBuilder.build();>@>}>@>>@>public PendingIntent createToastAndIncrementIntent(String s) {>@>    Intent intent = new Intent(getContext(), MyBroadcastReceiver.class)>@>            .putExtra(MyBroadcastReceiver.EXTRA_MESSAGE, s);>@>    return PendingIntent.getBroadcast(getContext(), 0, intent, 0);>@>}"
1_33_3_0_0_3_0_0,1,">@>public Slice seeMoreActionSlice(Uri sliceUri) {>@>    if (getContext() == null) {>@>        return null;>@>    }>@>    ListBuilder listBuilder = new ListBuilder(getContext(), sliceUri, ListBuilder.INFINITY);>@>    // ...>@>    listBuilder.setSeeMoreAction(seeAllNetworksPendingIntent);>@>    // ...>@>    return listBuilder.build();>@>}"
45167,2,">@>fun seeMoreRowSlice(sliceUri: Uri) =>@>    list(context, sliceUri, ListBuilder.INFINITY) {>@>        // ...>@>        seeMoreRow {>@>            title = ""See all available networks"">@>            addEndItem(>@>                IconCompat.createWithResource(context, R.drawable.ic_right_caret), ICON_IMAGE>@>            )>@>            primaryAction = SliceAction.create(>@>                seeAllNetworksPendingIntent,>@>                IconCompat.createWithResource(context, R.drawable.ic_wifi),>@>                ListBuilder.ICON_IMAGE,>@>                ""Wi-Fi Networks"">@>            )>@>        }>@>    }"
45288,2,>@>dependencies {>@>    ...>@>    
1_34_5_2_0_2_5_0,2,">@>@LargeTest>@>@RunWith(AndroidJUnit4.class)>@>public class WebViewActivityTest {>@>>@>    private static final String MACCHIATO = ""Macchiato"";>@>    private static final String DOPPIO = ""Doppio"";>@>>@>    @Rule>@>    public ActivityTestRule<WebViewActivity> mActivityRule =>@>        new ActivityTestRule<WebViewActivity>(WebViewActivity.class,>@>            false /* Initial touch mode */, false /*  launch activity */) {>@>>@>        @Override>@>        protected void afterActivityLaunched() {>@>            // Enable JavaScript.>@>            onWebView().forceJavascriptEnabled();>@>        }>@>    }>@>>@>    @Test>@>    public void typeTextInInput_clickButton_SubmitsForm() {>@>       // Lazily launch the Activity with a custom start Intent per test>@>       mActivityRule.launchActivity(withWebFormIntent());>@>>@>       // Selects the WebView in your layout.>@>       // If you have multiple WebViews you can also use a>@>       // matcher to select a given WebView, onWebView(withId(R.id.web_view)).>@>       onWebView()>@>           // Find the input element by ID>@>           .withElement(findElement(Locator.ID, ""text_input""))>@>           // Clear previous input>@>           .perform(clearElement())>@>           // Enter text into the input element>@>           .perform(DriverAtoms.webKeys(MACCHIATO))>@>           // Find the submit button>@>           .withElement(findElement(Locator.ID, ""submitBtn""))>@>           // Simulate a click via JavaScript>@>           .perform(webClick())>@>           // Find the response element by ID>@>           .withElement(findElement(Locator.ID, ""response""))>@>           // Verify that the response page contains the entered text>@>           .check(webMatches(getText(), containsString(MACCHIATO)));>@>    }>@>}>@>"
1_34_5_3_0_1_0_0,1,>@>dependencies {>@>    ...>@>    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'>@>}>@>
45776,1,">@>UiObject appItem = mDevice.findObject(new UiSelector()>@>        .className(""android.widget.ListView"")>@>        .instance(0)>@>        .childSelector(new UiSelector()>@>        .text(""Apps"")));>@>"
1_34_5_3_0_2_2_1,1,">@>val videos = UiCollection(UiSelector().className(""android.widget.FrameLayout""))>@>>@>// Retrieve the number of videos in this collection:>@>val count = videos.getChildCount(>@>        UiSelector().className(""android.widget.LinearLayout"")>@>)>@>>@>// Find a specific video and simulate a user-click on it>@>val video: UiObject = videos.getChildByText(>@>        UiSelector().className(""android.widget.LinearLayout""),>@>        ""Cute Baby Laughing"">@>)>@>video.click()>@>>@>// Simulate selecting a checkbox that is associated with the video>@>val checkBox: UiObject = video.getChild(>@>        UiSelector().className(""android.widget.Checkbox"")>@>)>@>if (!checkBox.isSelected) checkBox.click()>@>"
45800,1,">@>private static final String CALC_PACKAGE = ""com.myexample.calc"";>@>>@>public void testTwoPlusThreeEqualsFive() {>@>    // Enter an equation: 2 + 3 = ?>@>    mDevice.findObject(new UiSelector()>@>            .packageName(CALC_PACKAGE).resourceId(""two"")).click();>@>    mDevice.findObject(new UiSelector()>@>            .packageName(CALC_PACKAGE).resourceId(""plus"")).click();>@>    mDevice.findObject(new UiSelector()>@>            .packageName(CALC_PACKAGE).resourceId(""three"")).click();>@>    mDevice.findObject(new UiSelector()>@>            .packageName(CALC_PACKAGE).resourceId(""equals"")).click();>@>>@>    // Verify the result = 5>@>    UiObject result = mDevice.findObject(By.res(CALC_PACKAGE, ""result""));>@>    assertEquals(""5"", result.getText());>@>}>@>"
1_34_8_3_0_2_0_0,1,">@>java.lang.RuntimeException:>@>android.support.test.espresso.AmbiguousViewMatcherException>@>This matcher matches multiple views in the hierarchy: (withId: is <123456789>)>@>>@>...>@>>@>+----->SomeView{id=123456789, res-name=plus_one_standard_ann_button,>@>visibility=VISIBLE, width=523, height=48, has-focus=false, has-focusable=true,>@>window-focus=true, is-focused=false, is-focusable=false, enabled=true,>@>selected=false, is-layout-requested=false, text=,>@>root-is-layout-requested=false, x=0.0, y=625.0, child-count=1}>@>****MATCHES****>@>|>@>+------>OtherView{id=123456789, res-name=plus_one_standard_ann_button,>@>visibility=VISIBLE, width=523, height=48, has-focus=false, has-focusable=true,>@>window-focus=true, is-focused=false, is-focusable=true, enabled=true,>@>selected=false, is-layout-requested=false, text=Hello!,>@>root-is-layout-requested=false, x=0.0, y=0.0, child-count=1}>@>****MATCHES****>@>"
1_34_8_9_0_3_1_0,1,>@>androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.2'>@>
1_37_7_0_0_5_1_0,2,">@>@Rule>@>public ActivityTestRule<WebViewActivity> mActivityRule =>@>        new ActivityTestRule<WebViewActivity>(WebViewActivity.class,>@>        false, false) {>@>    @Override>@>    protected void afterActivityLaunched() {>@>        onWebView().forceJavascriptEnabled();>@>    }>@>}"
1_34_8_9_0_3_3_0,1,>@>onWebView()>@>    .withElement(...)>@>    .perform(...)>@>    .reset();>@>
1_37_7_0_0_5_1_0,2,>@>adb shell pm list instrumentation
1_35_2_11_0_2_2_1,1,>@>ActivityManager: Displayed com.android.myexample/.StartupTiming: +3s534ms>@>
1_35_6_3_0_1_0_0,1,">@>// Are we charging / charged?>@>int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);>@>boolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||>@>                     status == BatteryManager.BATTERY_STATUS_FULL;>@>>@>// How are we charging?>@>int chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);>@>boolean usbCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_USB;>@>boolean acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC;>@>"
1_35_6_3_0_2_0_0,1,"<receiver android:name="".PowerConnectionReceiver"">>@>  <intent-filter>>@>    <action android:name=""android.intent.action.ACTION_POWER_CONNECTED""/>>@>    <action android:name=""android.intent.action.ACTION_POWER_DISCONNECTED""/>>@>  </intent-filter>>@></receiver>"
1_35_6_5_0_2_0_0,1,>@>boolean isWiFi = activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;>@>
1_35_7_0_0_2_1_0,1,>@>res/layout/preferences.xml: Warning: The resource R.layout.preferences appears>@>    to be unused [UnusedResources]>@>
1_35_7_0_0_2_1_0,1,">@>android {>@>    // Other settings>@>>@>    buildTypes {>@>        release {>@>            minifyEnabled true>@>            shrinkResources true>@>            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'>@>        }>@>    }>@>}>@>"
1_35_8_0_0_1_1_0,1,">@>import android.content.ComponentCallbacks2;>@>// Other import statements ...>@>>@>public class MainActivity extends AppCompatActivity>@>    implements ComponentCallbacks2 {>@>>@>    // Other activity code ...>@>>@>    /**>@>     * Release memory when the UI becomes hidden or when system resources become low.>@>     * @param level the memory-related event that was raised.>@>     */>@>    public void onTrimMemory(int level) {>@>>@>        // Determine which lifecycle or system event was raised.>@>        switch (level) {>@>>@>            case ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN:>@>>@>                /*>@>                   Release any UI objects that currently hold memory.>@>>@>                   The user interface has moved to the background.>@>                */>@>>@>                break;>@>>@>            case ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE:>@>            case ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW:>@>            case ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL:>@>>@>                /*>@>                   Release any memory that your app doesn't need to run.>@>>@>                   The device is running low on memory while the app is running.>@>                   The event raised indicates the severity of the memory-related event.>@>                   If the event is TRIM_MEMORY_RUNNING_CRITICAL, then the system will>@>                   begin killing background processes.>@>                */>@>>@>                break;>@>>@>            case ComponentCallbacks2.TRIM_MEMORY_BACKGROUND:>@>            case ComponentCallbacks2.TRIM_MEMORY_MODERATE:>@>            case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:>@>>@>                /*>@>                   Release as much memory as the process can.>@>>@>                   The app is on the LRU list and the system is running low on memory.>@>                   The event raised indicates where the app sits within the LRU list.>@>                   If the event is TRIM_MEMORY_COMPLETE, the process will be one of>@>                   the first to be terminated.>@>                */>@>>@>                break;>@>>@>            default:>@>                /*>@>                  Release any non-critical data structures.>@>>@>                  The app received an unrecognized memory level value>@>                  from the system. Treat this as a generic low-memory message.>@>                */>@>                break;>@>        }>@>    }>@>}>@>"
1_35_12_0_0_4_0_0,1,>@>static class Foo {>@>    int mSplat;>@>}>@>>@>Foo[] mArray = ...>@>>@>public void zero() {>@>    int sum = 0;>@>    for (int i = 0; i < mArray.length; ++i) {>@>        sum += mArray[i].mSplat;>@>    }>@>}>@>>@>public void one() {>@>    int sum = 0;>@>    Foo[] localArray = mArray;>@>    int len = localArray.length;>@>>@>    for (int i = 0; i < len; ++i) {>@>        sum += localArray[i].mSplat;>@>    }>@>}>@>>@>public void two() {>@>    int sum = 0;>@>    for (Foo a : mArray) {>@>        sum += a.mSplat;>@>    }>@>}>@>
1_35_13_0_0_4_2_2,1,class MyClass {>@>    private Helper helper = null;>@>    public Helper getHelper() {>@>        if (helper == null) {>@>            synchronized (this) {>@>                if (helper == null) {>@>                    helper = new Helper();>@>                }>@>            }>@>        }>@>        return helper;>@>    }>@>}
1_35_13_0_0_5_4_0,1,">@>class MyClass {>@>  private:>@>    atomic<Helper*> helper {nullptr};>@>    mutex mtx;>@>  public:>@>    Helper* getHelper() {>@>      Helper* myHelper = helper.load(memory_order_acquire);>@>      if (myHelper == nullptr) {>@>        lock_guard<mutex> lg(mtx);>@>        myHelper = helper.load(memory_order_relaxed);>@>        if (myHelper == nullptr) {>@>          myHelper = new Helper();>@>          helper.store(myHelper, memory_order_release);>@>        }>@>      }>@>      return myHelper;>@>    }>@>};>@>"
1_35_14_0_0_3_0_0,1,F/art: art/runtime/thread.cc:435]>@>    Attempt to attach a thread with a too-small stack (16384 bytes)
1_36_4_0_0_4_2_0,1,">@>// Simulates an L-shaped drag path: 200 pixels right, then 200 pixels down.>@>private fun doRightThenDownDrag() {>@>    val dragRightPath = Path().apply {>@>        moveTo(200f, 200f)>@>        lineTo(400f, 200f)>@>    }>@>    val dragRightDuration = 500L // 0.5 second>@>>@>    // The starting point of the second path must match>@>    // the ending point of the first path.>@>    val dragDownPath = Path().apply {>@>        moveTo(400f, 200f)>@>        lineTo(400f, 400f)>@>    }>@>    val dragDownDuration = 500L>@>    val rightThenDownDrag = GestureDescription.StrokeDescription(>@>            dragRightPath,>@>            0L,>@>            dragRightDuration,>@>            true>@>    ).apply {>@>        continueStroke(dragDownPath, dragRightDuration, dragDownDuration, false)>@>    }>@>}>@>"
1_36_5_0_0_3_0_0,1,">@>override fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {>@>    return when(keyCode) {>@>        KeyEvent.KEYCODE_DPAD_LEFT -> {>@>            mCurrentValue-->@>            sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED)>@>            true>@>        }>@>        ...>@>    }>@>}>@>"
1_36_5_0_0_4_0_0,1,">@>ViewCompat.setAccessibilityDelegate(this, object : AccessibilityDelegateCompat() {>@>>@>    override fun onPopulateAccessibilityEvent(host: View, event: AccessibilityEvent) {>@>        super.onPopulateAccessibilityEvent(host, event)>@>        // We call the super implementation to populate its text for the>@>        // event. Then we add our text not present in a super class.>@>        // Very often you only need to add the text for the custom view.>@>        if (text?.isNotEmpty() == true) {>@>            event.text.add(text)>@>        }>@>    }>@>>@>    override fun onInitializeAccessibilityEvent(host: View, event: AccessibilityEvent) {>@>        super.onInitializeAccessibilityEvent(host, event);>@>        // We call the super implementation to let super classes>@>        // set appropriate event properties. Then we add the new property>@>        // (checked) which is not supported by a super class.>@>        event.isChecked = isChecked()>@>    }>@>>@>    override fun onInitializeAccessibilityNodeInfo(host: View, info: AccessibilityNodeInfoCompat) {>@>        super.onInitializeAccessibilityNodeInfo(host, info)>@>        // We call the super implementation to let super classes set>@>        // appropriate info properties. Then we add our properties>@>        // (checkable and checked) which are not supported by a super class.>@>        info.isCheckable = true>@>        info.isChecked = isChecked()>@>        // Quite often you only need to add the text for the custom view.>@>        if (text?.isNotEmpty() == true) {>@>            info.text = text>@>        }>@>    }>@>})>@>"
1_36_5_0_0_6_0_0,1,">@>class CustomTouchView(context: Context) : View(context) {>@>>@>    var mDownTouch = false>@>>@>    override fun onTouchEvent(event: MotionEvent): Boolean {>@>        super.onTouchEvent(event)>@>>@>        // Listening for the down and up touch events>@>        return when (event.action) {>@>            MotionEvent.ACTION_DOWN -> {>@>                mDownTouch = true>@>                true>@>            }>@>>@>            MotionEvent.ACTION_UP -> if (mDownTouch) {>@>                mDownTouch = false>@>                performClick() // Call this method to handle the response, and>@>                // thereby enable accessibility services to>@>                // perform this action for a user who cannot>@>                // click the touchscreen.>@>                true>@>            } else {>@>                false>@>            }>@>>@>            else -> false  // Return false for other touch events>@>        }>@>    }>@>>@>    override fun performClick(): Boolean {>@>        // Calls the super implementation, which generates an AccessibilityEvent>@>        // and calls the onClick() listener on the view, if any>@>        super.performClick()>@>>@>        // Handle the action for the custom click here>@>>@>        return true>@>    }>@>}>@>"
1_36_6_0_0_2_0_0,1,">@><accessibility-service>@>     android:accessibilityEventTypes=""typeViewClicked|typeViewFocused"">@>     android:packageNames=""com.example.android.myFirstApp, com.example.android.mySecondApp"">@>     android:accessibilityFeedbackType=""feedbackSpoken"">@>     android:notificationTimeout=""100"">@>     android:settingsActivity=""com.example.android.apis.accessibility.TestBackActivity"">@>     android:canRetrieveWindowContent=""true"">@>/>>@>"
1_37_0_0_0_1_1_1,2,">@>val intent = Intent(ACTION_SEND)>@>val possibleActivitiesList: List<ResolveInfo> =>@>        queryIntentActivities(intent, PackageManager.MATCH_ALL)>@>>@>// Verify that an activity in at least two apps on the user's device>@>// can handle the intent. Otherwise, start the intent only if an app>@>// on the user's device can handle the intent.>@>if (possibleActivitiesList.size > 1) {>@>>@>    // Create intent to show chooser.>@>    // Title is something similar to ""Share this photo with"".>@>>@>    "
1_37_0_0_0_2_2_0,1,">@>// Create an Intent to launch a PDF viewer for a file owned by this app.>@>Intent(Intent.ACTION_VIEW).apply {>@>    data = Uri.parse("""
1_37_0_0_0_2_2_0,1,">@>// Create an Intent to launch a PDF viewer for a file owned by this app.>@>Intent viewPdfIntent = new Intent(Intent.ACTION_VIEW);>@>viewPdfIntent.setData(Uri.parse("""
1_37_0_0_0_3_2_2,2,">@>private val UNAVAILABLE_STORAGE_STATES: Set<String> =>@>        setOf(MEDIA_REMOVED, MEDIA_UNMOUNTED, MEDIA_BAD_REMOVAL, MEDIA_UNMOUNTABLE)>@>...>@>val ringtone = File(getExternalFilesDir(DIRECTORY_RINGTONES), ""my_awesome_new_ringtone.m4a"")>@>when {>@>    isExternalStorageEmulated(ringtone) -> {>@>        Log.e(TAG, ""External storage is not present"")>@>    }>@>    UNAVAILABLE_STORAGE_STATES.contains(getExternalStorageState(ringtone)) -> {>@>        Log.e(TAG, ""External storage is not available"")>@>    }>@>    else -> {>@>        val fis = FileInputStream(ringtone)>@>>@>        // available() determines the approximate number of bytes that>@>        // can be read without blocking.>@>        val bytesAvailable: Int = fis.available()>@>        val fileBuffer = ByteArray(bytesAvailable)>@>        StringBuilder(bytesAvailable).apply {>@>            while (fis.read(fileBuffer) != -1) {>@>                append(fileBuffer)>@>            }>@>            // Implement appropriate logic for checking a file's validity.>@>            checkFileValidity(this)>@>        }>@>    }>@>}>@>"
1_37_1_0_0_1_1_1,2,">@>Intent intent = new Intent(Intent.ACTION_SEND);>@>List<ResolveInfo> possibleActivitiesList =>@>        queryIntentActivities(intent, PackageManager.MATCH_ALL);>@>>@>// Verify that an activity in at least two apps on the user's device>@>// can handle the intent. Otherwise, start the intent only if an app>@>// on the user's device can handle the intent.>@>if (possibleActivitiesList.size() > 1) {>@>>@>    // Create intent to show chooser.>@>    // Title is something similar to ""Share this photo with"".>@>>@>    "
1_37_1_0_0_1_2_2,1,>@><network-security-config>>@>    <debug-overrides>>@>        <trust-anchors>>@>            
50251,1,">@>WebView myWebView = (WebView) findViewById(R.id.webview);>@>>@>// messagePorts[0] and messagePorts[1] represent the two ports.>@>// They are already tangled to each other and have been started.>@>WebMessagePort[] channel = myWebView.createWebMessageChannel();>@>>@>// Create handler for channel[0] to receive messages.>@>channel[0].setWebMessageCallback(new WebMessagePort.WebMessageCallback() {>@>    @Override>@>    public void onMessage(WebMessagePort port, WebMessage message) {>@>         Log.d(TAG, ""On port "" + port + "", received this message: "" + message);>@>    }>@>});>@>>@>// Send a message from channel[1] to channel[0].>@>channel[1].postMessage(new WebMessage(""My secure message""));>@>"
1_37_3_0_0_3_1_0,1,">@>// Load CAs from an InputStream>@>// (could be from a resource or ByteArrayInputStream or ...)>@>val cf: CertificateFactory = CertificateFactory.getInstance(""X.509"")>@>// From https://www.washington.edu/itconnect/security/ca/load-der.crt>@>val caInput: InputStream = BufferedInputStream(FileInputStream(""load-der.crt""))>@>val ca: X509Certificate = caInput.use {>@>    cf.generateCertificate(it) as X509Certificate>@>}>@>System.out.println(""ca="" + ca.subjectDN)>@>>@>// Create a KeyStore containing our trusted CAs>@>val keyStoreType = KeyStore.getDefaultType()>@>val keyStore = KeyStore.getInstance(keyStoreType).apply {>@>    load(null, null)>@>    setCertificateEntry(""ca"", ca)>@>}>@>>@>// Create a TrustManager that trusts the CAs inputStream our KeyStore>@>val tmfAlgorithm: String = TrustManagerFactory.getDefaultAlgorithm()>@>val tmf: TrustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm).apply {>@>    init(keyStore)>@>}>@>>@>// Create an SSLContext that uses our TrustManager>@>val context: SSLContext = SSLContext.getInstance(""TLS"").apply {>@>    init(null, tmf.trustManagers, null)>@>}>@>>@>// Tell the URLConnection to use a SocketFactory from our SSLContext>@>val url = URL(""https://certs.cac.washington.edu/CAtest/"")>@>val urlConnection = url.openConnection() as HttpsURLConnection>@>urlConnection.sslSocketFactory = context.socketFactory>@>val inputStream: InputStream = urlConnection.inputStream>@>copyInputStreamToOutputStream(inputStream, System.out)>@>"
1_37_3_0_0_3_3_0,1,">@>$ openssl s_client -connect egov.uscis.gov:443>@>--->@>Certificate chain>@> 0 s:/C=US/ST=District Of Columbia/L=Washington/O=U.S. Department of Homeland Security/OU=United States Citizenship and Immigration Services/OU=Terms of use at www.verisign.com/rpa (c)05/CN=egov.uscis.gov>@>   i:/C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=Terms of use at https://www.verisign.com/rpa (c)10/CN=VeriSign Class 3 International Server CA - G3>@>--->@>"
1_37_3_0_0_4_0_0,2,">@>// Create an HostnameVerifier that hardwires the expected hostname.>@>// Note that is different than the URL's hostname:>@>// example.com versus example.org>@>HostnameVerifier hostnameVerifier = new HostnameVerifier() {>@>    @Override>@>    public boolean verify(String hostname, SSLSession session) {>@>        HostnameVerifier hv =>@>            HttpsURLConnection.getDefaultHostnameVerifier();>@>        return hv.verify(""example.com"", session);>@>    }>@>};>@>>@>// Tell the URLConnection to use our HostnameVerifier>@>URL url = new URL(""https://example.org/"");>@>HttpsURLConnection urlConnection =>@>    (HttpsURLConnection)url.openConnection();>@>urlConnection.setHostnameVerifier(hostnameVerifier);>@>InputStream in = urlConnection.getInputStream();>@>copyInputStreamToOutputStream(in, System.out);>@>"
1_37_4_0_0_3_0_0,1,">@><?xml version=""1.0"" encoding=""utf-8""?>>@><network-security-config>>@>    <debug-overrides>>@>        <trust-anchors>>@>            <certificates src=""@raw/debug_cas""/>>@>        </trust-anchors>>@>    </debug-overrides>>@></network-security-config>>@>"
1_37_6_3_0_4_1_0,1,>@>package com.google.android.gms.safetynet;>@>>@>public class SafeBrowsingThreat {>@>>@>  /**>@>   * This threat type identifies URLs of pages that are flagged as containing potentially>@>   * harmful applications.>@>   */>@>  public static final int TYPE_POTENTIALLY_HARMFUL_APPLICATION = 4;>@>>@>  /**>@>   * This threat type identifies URLs of pages that are flagged as containing social>@>   * engineering threats.>@>   */>@>  public static final int TYPE_SOCIAL_ENGINEERING = 5;>@>}>@>
51309,1,">@>/*>@> * Verify a signature previously made by a PrivateKey in our>@> * KeyStore. This uses the X.509 certificate attached to our>@> * private key in the KeyStore to validate a previously>@> * generated signature.>@> <em>/>@>val ks = KeyStore.getInstance(&quot;AndroidKeyStore&quot;).apply {>@>    load(null)>@>}>@>val entry = ks.getEntry(alias, null) as? KeyStore.PrivateKeyEntry>@>if (entry == null) {>@>    Log.w(TAG, &quot;Not an instance of a PrivateKeyEntry&quot;)>@>    return false>@>}>@>val valid: Boolean = Signature.getInstance(&quot;SHA256withECDSA&quot;).run {>@>    initVerify(entry.certificate)>@>    update(data)>@>    verify(signature)>@>}>@>"
1_37_11_0_0_5_0_0,1,>@>$ adb shell sm set-emulate-fbe false>@>
1_37_12_0_0_1_0_0,1,">@>StorageManager sm = (StorageManager)getSystemService(Context.STORAGE_SERVICE);>@>StorageVolume volume = sm.getPrimaryStorageVolume();>@>Intent intent = volume.createAccessIntent(Environment.DIRECTORY_PICTURES);>@>startActivityForResult(intent, request_code);>@>"
1_37_12_0_0_2_0_0,2,">@>// BroadcastReceiver has already cached the MEDIA_MOUNTED>@>// notification Intent in mediaMountedIntent>@>val volume =>@>    mediaMountedIntent.getParcelableExtra(StorageVolume.EXTRA_STORAGE_VOLUME) as StorageVolume>@>volume.createAccessIntent(Environment.DIRECTORY_PICTURES).also { intent ->>@>    startActivityForResult(intent, request_code)>@>}>@>"
1_37_12_0_0_2_0_0,1,">@>// BroadcastReceiver has already cached the MEDIA_MOUNTED>@>// notification Intent in mediaMountedIntent>@>StorageVolume volume = (StorageVolume)>@>    mediaMountedIntent.getParcelableExtra(StorageVolume.EXTRA_STORAGE_VOLUME);>@>Intent intent = volume.createAccessIntent(Environment.DIRECTORY_PICTURES);>@>startActivityForResult(intent, request_code);>@>"
51888,2,// Open File object from its file URI>@>File fileToShare = new File(
52241,2,">@>AndroidForWorkAccountSupport androidForWorkAccountSupport =>@>    new AndroidForWorkAccountSupport(context, admin);>@>"
1_39_7_1_0_2_1_0,2,">@>  <uses-permission android:name=>@>      ""android.permission.DOWNLOAD_WITHOUT_NOTIFICATION""/>>@>  <uses-permission android:name=>@>      ""android.permission.GET_ACCOUNTS""/>>@>  <uses-permission android:name=>@>      ""android.permission.MANAGE_ACCOUNTS""/>>@>  <uses-permission android:name=>@>      ""android.permission.WRITE_SYNC_SETTINGS""/>>@>  <uses-permission android:name=>@>      ""com.google.android.providers.gsf.permission.READ_GSERVICES""/>"
52427,2,">@>// Get the device policy manager>@>DevicePolicyManager myDevicePolicyMgr =>@>        (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);>@>ComponentName componentName = myDeviceAdminReceiver.getComponentName(this);>@>// Set the name for the newly created work profile.>@>myDevicePolicyMgr.setProfileName(componentName, ""My New Work Profile"");>@>// ...and enable the profile>@>myDevicePolicyMgr.setProfileEnabled(componentName);"
52450,2,">@>ManagedConfigurationsSupport managedConfigurationsSupport =>@>    new ManagedConfigurationsSupport(context, admin);>@>"
1_39_7_2_0_3_4_1,1,>@>managedConfigurationsSupport.enableManagedConfigurations();>@>
1_39_7_7_0_3_0_0,2,">@>/**>@> * Called when a new update is available.>@> */>@>public void onSystemUpdatePending (Context context, Intent intent,>@>                                   long receivedTime) {>@>>@>  // System update information is supported in API level 26 or higher.>@>  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {>@>    return;>@>  }>@>  SystemUpdateInfo updateInfo = getManager(context)>@>      .getPendingSystemUpdate(getWho(context));>@>  if (updateInfo == null) {>@>    return;>@>  }>@>  if (updateInfo.getSecurityPatchState() ==>@>      SystemUpdateInfo.SECURITY_PATCH_STATE_TRUE) {>@>    // Perhaps install because this is a security patch.>@>    // ...>@>  }>@>}"
1_39_7_7_0_5_1_0,1,"// Log any freeze periods that might be set on a system update policy.>@>dpm.systemUpdatePolicy?.freezePeriods?.forEach {>@>    Log.i(TAG, ""Freeze period: $it"")>@>}"
1_39_9_0_0_3_3_1,1,">@>DevicePolicyManager mDPM;>@>ComponentName mDeviceAdminSample;>@>int pwLength;>@>...>@>mDPM.setPasswordMinimumLength(mDeviceAdminSample, pwLength);>@>"
1_39_9_0_0_3_3_2,1,">@>private lateinit var mDPM: DevicePolicyManager>@>private lateinit var mDeviceAdminSample: ComponentName>@>private val timeMs: Long = 1000L * mTimeout.text.toString().toLong()>@>...>@>mDPM.setMaximumTimeToLock(mDeviceAdminSample, timeMs)>@>"
1_39_9_0_0_3_3_3,1,>@>private lateinit var mDPM: DevicePolicyManager>@>mDPM.wipeData(0)>@>
1_40_5_0_0_3_4_0,1,">@>public class SampleDownloaderService extends DownloaderService {>@>    // You must use the public key belonging to your publisher account>@>    public static final String BASE64_PUBLIC_KEY = ""YourLVLKey"";>@>    // You should also modify this salt>@>    public static final byte[] SALT = new byte[] { 1, 42, -12, -1, 54, 98,>@>            -100, -12, 43, 2, -8, -4, 9, 5, -106, -107, -33, 45, -1, 84>@>    };>@>>@>    @Override>@>    public String getPublicKey() {>@>        return BASE64_PUBLIC_KEY;>@>    }>@>>@>    @Override>@>    public byte[] getSALT() {>@>        return SALT;>@>    }>@>>@>    @Override>@>    public String getAlarmReceiverClassName() {>@>        return SampleAlarmReceiver.class.getName();>@>    }>@>}>@>"
1_40_5_0_0_3_6_0,1,">@>boolean expansionFilesDelivered() {>@>    for (XAPKFile xf : xAPKS) {>@>        String fileName = Helpers.getExpansionAPKFileName(this, xf.mIsBase,>@>            xf.mFileVersion);>@>        if (!Helpers.doesFileExist(this, fileName, xf.mFileSize, false))>@>            return false;>@>    }>@>    return true;>@>}>@>"
55778,1,>@>import com.google.android.vending.licensing.LicenseChecker>@>import com.google.android.vending.licensing.LicenseCheckerCallback>@>
1_40_6_4_0_3_4_0,1,>@>    private Handler mHandler;>@>>@>    @Override>@>    public void onCreate(Bundle savedInstanceState) {>@>        ...>@>        mHandler = new Handler();>@>    }>@>
1_40_6_4_0_3_7_0,1,">@>public class MainActivity extends Activity {>@>    private static final String BASE64_PUBLIC_KEY = ""MIIBIjANBgkqhkiG ... ""; //truncated for this example>@>    ...>@>}>@>"
1_40_7_2_1_2_0_0,1,>@>InstallReferrerClient mReferrerClient>@>...>@>mReferrerClient = InstallReferrerClient.newBuilder(this).build();>@>mReferrerClient.startConnection(new InstallReferrerStateListener() {>@>    @Override>@>    public void onInstallReferrerSetupFinished(int responseCode) {>@>        switch (responseCode) {>@>            case InstallReferrerResponse.OK:>@>                // Connection established>@>                break;>@>            case InstallReferrerResponse.FEATURE_NOT_SUPPORTED:>@>                // API not available on the current Play Store app>@>                break;>@>            case InstallReferrerResponse.SERVICE_UNAVAILABLE:>@>                // Connection could not be established>@>                break;>@>        }>@>    }>@>>@>    @Override>@>    public void onInstallReferrerServiceDisconnected() {>@>        // Try to restart the connection on the next request to>@>        // Google Play by calling the startConnection() method.>@>    }>@>});>@>
1_40_7_2_1_3_0_0,1,>@>val response: ReferrerDetails = mReferrerClient.installReferrer>@>response.installReferrer>@>response.referrerClickTimestampSeconds>@>response.installBeginTimestampSeconds>@>
